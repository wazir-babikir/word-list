// compressed with jscompress

// prettier-ignore
var reservedWords={3:"abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile",5:"class enum extends super const export import",6:"enum",strict:"implements interface let package private protected public static yield",strictBind:"eval arguments"},ecma5AndLessKeywords="break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this",keywords={5:ecma5AndLessKeywords,"5module":ecma5AndLessKeywords+" export import",6:ecma5AndLessKeywords+" const class extends export import super"},keywordRelationalOperator=/^in(stanceof)?$/,nonASCIIidentifierStartChars="\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08C7\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\u9FFC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7BF\uA7C2-\uA7CA\uA7F5-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC",nonASCIIidentifierChars="\u200C\u200D\xB7\u0300-\u036F\u0387\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u0669\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07C0-\u07C9\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D3-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0966-\u096F\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09E6-\u09EF\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A66-\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AE6-\u0AEF\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B66-\u0B6F\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0BE6-\u0BEF\u0C00-\u0C04\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CE6-\u0CEF\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D66-\u0D6F\u0D81-\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0E50-\u0E59\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0ED0-\u0ED9\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1040-\u1049\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F-\u109D\u135D-\u135F\u1369-\u1371\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u18A9\u1920-\u192B\u1930-\u193B\u1946-\u194F\u19D0-\u19DA\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AB0-\u1ABD\u1ABF\u1AC0\u1B00-\u1B04\u1B34-\u1B44\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BB0-\u1BB9\u1BE6-\u1BF3\u1C24-\u1C37\u1C40-\u1C49\u1C50-\u1C59\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u203F\u2040\u2054\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA620-\uA629\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA82C\uA880\uA881\uA8B4-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F1\uA8FF-\uA909\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9D0-\uA9D9\uA9E5\uA9F0-\uA9F9\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA50-\uAA59\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uABF0-\uABF9\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFF10-\uFF19\uFF3F",nonASCIIidentifierStart=new RegExp("["+nonASCIIidentifierStartChars+"]"),nonASCIIidentifier=new RegExp("["+nonASCIIidentifierStartChars+nonASCIIidentifierChars+"]");
nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;
var astralIdentifierStartCodes = [
    0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48,
    48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5,
    39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22,
    11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2,
    2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111,
    72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 107, 20,
    28, 22, 13, 52, 76, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47,
    15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46,
    39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3,
    21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0,
    72, 26, 230, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95,
    7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 35, 56,
    264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2,
    31, 15, 0, 328, 18, 190, 0, 80, 921, 103, 110, 18, 195, 2749, 1070, 4050,
    582, 8634, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129,
    74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8952, 286, 50, 2,
    18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3,
    1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2,
    0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2,
    30, 2, 24, 2, 7, 2357, 44, 11, 6, 17, 0, 370, 43, 1301, 196, 60, 67, 8, 0,
    1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0,
    2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2,
    6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42717, 35, 4148,
    12, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938,
  ],
  astralIdentifierCodes = [
    509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1,
    574, 3, 9, 9, 370, 1, 154, 10, 176, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9,
    7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0,
    161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193,
    17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12,
    9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9,
    120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7,
    17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2,
    4, 9, 9, 330, 3, 19306, 9, 135, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82,
    0, 12, 1, 19628, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513,
    54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262,
    6, 10, 9, 419, 13, 1495, 6, 110, 6, 6, 9, 4759, 9, 787719, 239,
  ];
function isInAstralSet(e, t) {
  for (var a = 65536, n = 0; n < t.length; n += 2) {
    if (((a += t[n]), a > e)) return !1;
    if (((a += t[n + 1]), a >= e)) return !0;
  }
}
function isIdentifierStart(e, t) {
  return 65 > e
    ? 36 == e
    : !!(91 > e) ||
        (97 > e
          ? 95 == e
          : !!(123 > e) ||
            (65535 >= e
              ? 170 <= e && nonASCIIidentifierStart.test(String.fromCharCode(e))
              : !1 !== t && isInAstralSet(e, astralIdentifierStartCodes)));
}
function isIdentifierChar(e, t) {
  return 48 > e
    ? 36 == e
    : !!(58 > e) ||
        (!(65 > e) &&
          (!!(91 > e) ||
            (97 > e
              ? 95 == e
              : !!(123 > e) ||
                (65535 >= e
                  ? 170 <= e && nonASCIIidentifier.test(String.fromCharCode(e))
                  : !1 !== t &&
                    (isInAstralSet(e, astralIdentifierStartCodes) ||
                      isInAstralSet(e, astralIdentifierCodes))))));
}
var TokenType = function (e, t) {
  void 0 === t && (t = {}),
    (this.label = e),
    (this.keyword = t.keyword),
    (this.beforeExpr = !!t.beforeExpr),
    (this.startsExpr = !!t.startsExpr),
    (this.isLoop = !!t.isLoop),
    (this.isAssign = !!t.isAssign),
    (this.prefix = !!t.prefix),
    (this.postfix = !!t.postfix),
    (this.binop = t.binop || null),
    (this.updateContext = null);
};
function binop(e, t) {
  return new TokenType(e, { beforeExpr: !0, binop: t });
}
var beforeExpr = { beforeExpr: !0 },
  startsExpr = { startsExpr: !0 },
  keywords$1 = {};
function kw(e, t) {
  return (
    void 0 === t && (t = {}),
    (t.keyword = e),
    (keywords$1[e] = new TokenType(e, t))
  );
}
var types = {
    num: new TokenType('num', startsExpr),
    regexp: new TokenType('regexp', startsExpr),
    string: new TokenType('string', startsExpr),
    name: new TokenType('name', startsExpr),
    privateId: new TokenType('privateId', startsExpr),
    eof: new TokenType('eof'),
    bracketL: new TokenType('[', { beforeExpr: !0, startsExpr: !0 }),
    bracketR: new TokenType(']'),
    braceL: new TokenType('{', { beforeExpr: !0, startsExpr: !0 }),
    braceR: new TokenType('}'),
    parenL: new TokenType('(', { beforeExpr: !0, startsExpr: !0 }),
    parenR: new TokenType(')'),
    comma: new TokenType(',', beforeExpr),
    semi: new TokenType(';', beforeExpr),
    colon: new TokenType(':', beforeExpr),
    dot: new TokenType('.'),
    question: new TokenType('?', beforeExpr),
    questionDot: new TokenType('?.'),
    arrow: new TokenType('=>', beforeExpr),
    template: new TokenType('template'),
    invalidTemplate: new TokenType('invalidTemplate'),
    ellipsis: new TokenType('...', beforeExpr),
    backQuote: new TokenType('`', startsExpr),
    dollarBraceL: new TokenType('${', { beforeExpr: !0, startsExpr: !0 }),
    eq: new TokenType('=', { beforeExpr: !0, isAssign: !0 }),
    assign: new TokenType('_=', { beforeExpr: !0, isAssign: !0 }),
    incDec: new TokenType('++/--', { prefix: !0, postfix: !0, startsExpr: !0 }),
    prefix: new TokenType('!/~', {
      beforeExpr: !0,
      prefix: !0,
      startsExpr: !0,
    }),
    logicalOR: binop('||', 1),
    logicalAND: binop('&&', 2),
    bitwiseOR: binop('|', 3),
    bitwiseXOR: binop('^', 4),
    bitwiseAND: binop('&', 5),
    equality: binop('==/!=/===/!==', 6),
    relational: binop('</>/<=/>=', 7),
    bitShift: binop('<</>>/>>>', 8),
    plusMin: new TokenType('+/-', {
      beforeExpr: !0,
      binop: 9,
      prefix: !0,
      startsExpr: !0,
    }),
    modulo: binop('%', 10),
    star: binop('*', 10),
    slash: binop('/', 10),
    starstar: new TokenType('**', { beforeExpr: !0 }),
    coalesce: binop('??', 1),
    _break: kw('break'),
    _case: kw('case', beforeExpr),
    _catch: kw('catch'),
    _continue: kw('continue'),
    _debugger: kw('debugger'),
    _default: kw('default', beforeExpr),
    _do: kw('do', { isLoop: !0, beforeExpr: !0 }),
    _else: kw('else', beforeExpr),
    _finally: kw('finally'),
    _for: kw('for', { isLoop: !0 }),
    _function: kw('function', startsExpr),
    _if: kw('if'),
    _return: kw('return', beforeExpr),
    _switch: kw('switch'),
    _throw: kw('throw', beforeExpr),
    _try: kw('try'),
    _var: kw('var'),
    _const: kw('const'),
    _while: kw('while', { isLoop: !0 }),
    _with: kw('with'),
    _new: kw('new', { beforeExpr: !0, startsExpr: !0 }),
    _this: kw('this', startsExpr),
    _super: kw('super', startsExpr),
    _class: kw('class', startsExpr),
    _extends: kw('extends', beforeExpr),
    _export: kw('export'),
    _import: kw('import', startsExpr),
    _null: kw('null', startsExpr),
    _true: kw('true', startsExpr),
    _false: kw('false', startsExpr),
    _in: kw('in', { beforeExpr: !0, binop: 7 }),
    _instanceof: kw('instanceof', { beforeExpr: !0, binop: 7 }),
    _typeof: kw('typeof', { beforeExpr: !0, prefix: !0, startsExpr: !0 }),
    _void: kw('void', { beforeExpr: !0, prefix: !0, startsExpr: !0 }),
    _delete: kw('delete', { beforeExpr: !0, prefix: !0, startsExpr: !0 }),
  },
  lineBreak = /\r\n?|\n|\u2028|\u2029/,
  lineBreakG = new RegExp(lineBreak.source, 'g');
function isNewLine(e, t) {
  return 10 === e || 13 === e || (!t && (8232 === e || 8233 === e));
}
var nonASCIIwhitespace = /[\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff]/,
  skipWhiteSpace = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g,
  ref = Object.prototype,
  hasOwnProperty = ref.hasOwnProperty,
  toString = ref.toString;
function has(e, t) {
  return hasOwnProperty.call(e, t);
}
var isArray =
  Array.isArray ||
  function (e) {
    return '[object Array]' === toString.call(e);
  };
function wordsRegexp(e) {
  return new RegExp('^(?:' + e.replace(/ /g, '|') + ')$');
}
var Position = function (e, t) {
  (this.line = e), (this.column = t);
};
Position.prototype.offset = function (e) {
  return new Position(this.line, this.column + e);
};
var SourceLocation = function (e, t, a) {
  (this.start = t),
    (this.end = a),
    null !== e.sourceFile && (this.source = e.sourceFile);
};
function getLineInfo(e, t) {
  for (var a = 1, n = 0; ; ) {
    lineBreakG.lastIndex = n;
    var r = lineBreakG.exec(e);
    if (r && r.index < t) ++a, (n = r.index + r[0].length);
    else return new Position(a, t - n);
  }
}
var defaultOptions = {
    ecmaVersion: null,
    sourceType: 'script',
    onInsertedSemicolon: null,
    onTrailingComma: null,
    allowReserved: null,
    allowReturnOutsideFunction: !1,
    allowImportExportEverywhere: !1,
    allowAwaitOutsideFunction: null,
    allowSuperOutsideMethod: null,
    allowHashBang: !1,
    locations: !1,
    onToken: null,
    onComment: null,
    ranges: !1,
    program: null,
    sourceFile: null,
    directSourceFile: null,
    preserveParens: !1,
  },
  warnedAboutEcmaVersion = !1;
function getOptions(e) {
  var t = {};
  for (var a in defaultOptions)
    t[a] = e && has(e, a) ? e[a] : defaultOptions[a];
  if (
    ('latest' === t.ecmaVersion
      ? (t.ecmaVersion = 1e8)
      : null == t.ecmaVersion
      ? (!warnedAboutEcmaVersion &&
          'object' == typeof console &&
          console.warn &&
          ((warnedAboutEcmaVersion = !0),
          console.warn(
            'Since Acorn 8.0.0, options.ecmaVersion is required.\nDefaulting to 2020, but this will stop working in the future.',
          )),
        (t.ecmaVersion = 11))
      : 2015 <= t.ecmaVersion && (t.ecmaVersion -= 2009),
    null == t.allowReserved && (t.allowReserved = 5 > t.ecmaVersion),
    isArray(t.onToken))
  ) {
    var n = t.onToken;
    t.onToken = function (e) {
      return n.push(e);
    };
  }
  return isArray(t.onComment) && (t.onComment = pushComment(t, t.onComment)), t;
}
function pushComment(e, t) {
  return function (a, n, r, s, i, o) {
    var p = { type: a ? 'Block' : 'Line', value: n, start: r, end: s };
    e.locations && (p.loc = new SourceLocation(this, i, o)),
      e.ranges && (p.range = [r, s]),
      t.push(p);
  };
}
var SCOPE_TOP = 1,
  SCOPE_FUNCTION = 2,
  SCOPE_VAR = 3,
  SCOPE_ASYNC = 4,
  SCOPE_GENERATOR = 8,
  SCOPE_ARROW = 16,
  SCOPE_SIMPLE_CATCH = 32,
  SCOPE_SUPER = 64,
  SCOPE_DIRECT_SUPER = 128;
function functionFlags(e, t) {
  return SCOPE_FUNCTION | (e ? SCOPE_ASYNC : 0) | (t ? SCOPE_GENERATOR : 0);
}
var BIND_NONE = 0,
  BIND_VAR = 1,
  BIND_LEXICAL = 2,
  BIND_FUNCTION = 3,
  BIND_SIMPLE_CATCH = 4,
  BIND_OUTSIDE = 5,
  Parser = function (e, t, a) {
    (this.options = e = getOptions(e)),
      (this.sourceFile = e.sourceFile),
      (this.keywords = wordsRegexp(
        keywords[
          6 <= e.ecmaVersion ? 6 : 'module' === e.sourceType ? '5module' : 5
        ],
      ));
    var n = '';
    !0 !== e.allowReserved &&
      ((n =
        reservedWords[6 <= e.ecmaVersion ? 6 : 5 === e.ecmaVersion ? 5 : 3]),
      'module' === e.sourceType && (n += ' await')),
      (this.reservedWords = wordsRegexp(n));
    var r = (n ? n + ' ' : '') + reservedWords.strict;
    (this.reservedWordsStrict = wordsRegexp(r)),
      (this.reservedWordsStrictBind = wordsRegexp(
        r + ' ' + reservedWords.strictBind,
      )),
      (this.input = t + ''),
      (this.containsEsc = !1),
      a
        ? ((this.pos = a),
          (this.lineStart = this.input.lastIndexOf('\n', a - 1) + 1),
          (this.curLine = this.input
            .slice(0, this.lineStart)
            .split(lineBreak).length))
        : ((this.pos = this.lineStart = 0), (this.curLine = 1)),
      (this.type = types.eof),
      (this.value = null),
      (this.start = this.end = this.pos),
      (this.startLoc = this.endLoc = this.curPosition()),
      (this.lastTokEndLoc = this.lastTokStartLoc = null),
      (this.lastTokStart = this.lastTokEnd = this.pos),
      (this.context = this.initialContext()),
      (this.exprAllowed = !0),
      (this.inModule = 'module' === e.sourceType),
      (this.strict = this.inModule || this.strictDirective(this.pos)),
      (this.potentialArrowAt = -1),
      (this.potentialArrowInForAwait = !1),
      (this.yieldPos = this.awaitPos = this.awaitIdentPos = 0),
      (this.labels = []),
      (this.undefinedExports = Object.create(null)),
      0 === this.pos &&
        e.allowHashBang &&
        '#!' === this.input.slice(0, 2) &&
        this.skipLineComment(2),
      (this.scopeStack = []),
      this.enterScope(SCOPE_TOP),
      (this.regexpState = null),
      (this.privateNameStack = []);
  },
  prototypeAccessors = {
    inFunction: { configurable: !0 },
    inGenerator: { configurable: !0 },
    inAsync: { configurable: !0 },
    canAwait: { configurable: !0 },
    allowSuper: { configurable: !0 },
    allowDirectSuper: { configurable: !0 },
    treatFunctionsAsVar: { configurable: !0 },
    inNonArrowFunction: { configurable: !0 },
  };
(Parser.prototype.parse = function () {
  var e = this.options.program || this.startNode();
  return this.nextToken(), this.parseTopLevel(e);
}),
  (prototypeAccessors.inFunction.get = function () {
    return 0 < (this.currentVarScope().flags & SCOPE_FUNCTION);
  }),
  (prototypeAccessors.inGenerator.get = function () {
    return (
      0 < (this.currentVarScope().flags & SCOPE_GENERATOR) &&
      !this.currentVarScope().inClassFieldInit
    );
  }),
  (prototypeAccessors.inAsync.get = function () {
    return (
      0 < (this.currentVarScope().flags & SCOPE_ASYNC) &&
      !this.currentVarScope().inClassFieldInit
    );
  }),
  (prototypeAccessors.canAwait.get = function () {
    for (var e, t = this.scopeStack.length - 1; 0 <= t; t--) {
      if (((e = this.scopeStack[t]), e.inClassFieldInit)) return !1;
      if (e.flags & SCOPE_FUNCTION) return 0 < (e.flags & SCOPE_ASYNC);
    }
    return (
      (this.inModule && 13 <= this.options.ecmaVersion) ||
      this.options.allowAwaitOutsideFunction
    );
  }),
  (prototypeAccessors.allowSuper.get = function () {
    var e = this.currentThisScope(),
      t = e.flags,
      a = e.inClassFieldInit;
    return 0 < (t & SCOPE_SUPER) || a || this.options.allowSuperOutsideMethod;
  }),
  (prototypeAccessors.allowDirectSuper.get = function () {
    return 0 < (this.currentThisScope().flags & SCOPE_DIRECT_SUPER);
  }),
  (prototypeAccessors.treatFunctionsAsVar.get = function () {
    return this.treatFunctionsAsVarInScope(this.currentScope());
  }),
  (prototypeAccessors.inNonArrowFunction.get = function () {
    var e = this.currentThisScope(),
      t = e.flags,
      a = e.inClassFieldInit;
    return 0 < (t & SCOPE_FUNCTION) || a;
  }),
  (Parser.extend = function () {
    for (var e = [], t = arguments.length; t--; ) e[t] = arguments[t];
    for (var a = this, n = 0; n < e.length; n++) a = e[n](a);
    return a;
  }),
  (Parser.parse = function (e, t) {
    return new this(t, e).parse();
  }),
  (Parser.parseExpressionAt = function (e, t, a) {
    var n = new this(a, e, t);
    return n.nextToken(), n.parseExpression();
  }),
  (Parser.tokenizer = function (e, t) {
    return new this(t, e);
  }),
  Object.defineProperties(Parser.prototype, prototypeAccessors);
var pp = Parser.prototype,
  literal = /^(?:'((?:\\.|[^'\\])*?)'|"((?:\\.|[^"\\])*?)")/;
(pp.strictDirective = function (e) {
  for (;;) {
    (skipWhiteSpace.lastIndex = e),
      (e += skipWhiteSpace.exec(this.input)[0].length);
    var t = literal.exec(this.input.slice(e));
    if (!t) return !1;
    if ('use strict' === (t[1] || t[2])) {
      skipWhiteSpace.lastIndex = e + t[0].length;
      var a = skipWhiteSpace.exec(this.input),
        n = a.index + a[0].length,
        r = this.input.charAt(n);
      return (
        ';' === r ||
        '}' === r ||
        (lineBreak.test(a[0]) &&
          !(
            /[(`.[+\-/*%<>=,?^&]/.test(r) ||
            ('!' === r && '=' === this.input.charAt(n + 1))
          ))
      );
    }
    (e += t[0].length),
      (skipWhiteSpace.lastIndex = e),
      (e += skipWhiteSpace.exec(this.input)[0].length),
      ';' === this.input[e] && e++;
  }
}),
  (pp.eat = function (e) {
    return !(this.type !== e) && (this.next(), !0);
  }),
  (pp.isContextual = function (e) {
    return this.type === types.name && this.value === e && !this.containsEsc;
  }),
  (pp.eatContextual = function (e) {
    return !!this.isContextual(e) && (this.next(), !0);
  }),
  (pp.expectContextual = function (e) {
    this.eatContextual(e) || this.unexpected();
  }),
  (pp.canInsertSemicolon = function () {
    return (
      this.type === types.eof ||
      this.type === types.braceR ||
      lineBreak.test(this.input.slice(this.lastTokEnd, this.start))
    );
  }),
  (pp.insertSemicolon = function () {
    if (this.canInsertSemicolon())
      return (
        this.options.onInsertedSemicolon &&
          this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc),
        !0
      );
  }),
  (pp.semicolon = function () {
    this.eat(types.semi) || this.insertSemicolon() || this.unexpected();
  }),
  (pp.afterTrailingComma = function (e, t) {
    if (this.type === e)
      return (
        this.options.onTrailingComma &&
          this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc),
        t || this.next(),
        !0
      );
  }),
  (pp.expect = function (e) {
    this.eat(e) || this.unexpected();
  }),
  (pp.unexpected = function (e) {
    this.raise(null == e ? this.start : e, 'Unexpected token');
  });
function DestructuringErrors() {
  this.shorthandAssign =
    this.trailingComma =
    this.parenthesizedAssign =
    this.parenthesizedBind =
    this.doubleProto =
      -1;
}
(pp.checkPatternErrors = function (e, t) {
  if (e) {
    -1 < e.trailingComma &&
      this.raiseRecoverable(
        e.trailingComma,
        'Comma is not permitted after the rest element',
      );
    var a = t ? e.parenthesizedAssign : e.parenthesizedBind;
    -1 < a && this.raiseRecoverable(a, 'Parenthesized pattern');
  }
}),
  (pp.checkExpressionErrors = function (e, t) {
    if (!e) return !1;
    var a = e.shorthandAssign,
      n = e.doubleProto;
    return t
      ? void (0 <= a &&
          this.raise(
            a,
            'Shorthand property assignments are valid only in destructuring patterns',
          ),
        0 <= n &&
          this.raiseRecoverable(n, 'Redefinition of __proto__ property'))
      : 0 <= a || 0 <= n;
  }),
  (pp.checkYieldAwaitInDefaultParams = function () {
    this.yieldPos &&
      (!this.awaitPos || this.yieldPos < this.awaitPos) &&
      this.raise(this.yieldPos, 'Yield expression cannot be a default value'),
      this.awaitPos &&
        this.raise(this.awaitPos, 'Await expression cannot be a default value');
  }),
  (pp.isSimpleAssignTarget = function (e) {
    return 'ParenthesizedExpression' === e.type
      ? this.isSimpleAssignTarget(e.expression)
      : 'Identifier' === e.type || 'MemberExpression' === e.type;
  });
var pp$1 = Parser.prototype;
pp$1.parseTopLevel = function (e) {
  var t = Object.create(null);
  for (e.body || (e.body = []); this.type !== types.eof; ) {
    var a = this.parseStatement(null, !0, t);
    e.body.push(a);
  }
  if (this.inModule)
    for (
      var n, r = 0, s = Object.keys(this.undefinedExports);
      r < s.length;
      r += 1
    )
      (n = s[r]),
        this.raiseRecoverable(
          this.undefinedExports[n].start,
          "Export '" + n + "' is not defined",
        );
  return (
    this.adaptDirectivePrologue(e.body),
    this.next(),
    (e.sourceType = this.options.sourceType),
    this.finishNode(e, 'Program')
  );
};
var loopLabel = { kind: 'loop' },
  switchLabel = { kind: 'switch' };
(pp$1.isLet = function (e) {
  if (6 > this.options.ecmaVersion || !this.isContextual('let')) return !1;
  skipWhiteSpace.lastIndex = this.pos;
  var t = skipWhiteSpace.exec(this.input),
    a = this.pos + t[0].length,
    n = this.input.charCodeAt(a);
  if (91 === n || 92 === n || (55295 < n && 56320 > n)) return !0;
  if (e) return !1;
  if (123 === n) return !0;
  if (isIdentifierStart(n, !0)) {
    for (var r = a + 1; isIdentifierChar((n = this.input.charCodeAt(r)), !0); )
      ++r;
    if (92 === n || (55295 < n && 56320 > n)) return !0;
    var s = this.input.slice(a, r);
    if (!keywordRelationalOperator.test(s)) return !0;
  }
  return !1;
}),
  (pp$1.isAsyncFunction = function () {
    if (8 > this.options.ecmaVersion || !this.isContextual('async')) return !1;
    skipWhiteSpace.lastIndex = this.pos;
    var e,
      t = skipWhiteSpace.exec(this.input),
      a = this.pos + t[0].length;
    return (
      !lineBreak.test(this.input.slice(this.pos, a)) &&
      'function' === this.input.slice(a, a + 8) &&
      (a + 8 === this.input.length ||
        !(
          isIdentifierChar((e = this.input.charCodeAt(a + 8))) ||
          (55295 < e && 56320 > e)
        ))
    );
  }),
  (pp$1.parseStatement = function (e, t, a) {
    var n,
      r = this.type,
      s = this.startNode();
    switch ((this.isLet(e) && ((r = types._var), (n = 'let')), r)) {
      case types._break:
      case types._continue:
        return this.parseBreakContinueStatement(s, r.keyword);
      case types._debugger:
        return this.parseDebuggerStatement(s);
      case types._do:
        return this.parseDoStatement(s);
      case types._for:
        return this.parseForStatement(s);
      case types._function:
        return (
          e &&
            (this.strict || ('if' !== e && 'label' !== e)) &&
            6 <= this.options.ecmaVersion &&
            this.unexpected(),
          this.parseFunctionStatement(s, !1, !e)
        );
      case types._class:
        return e && this.unexpected(), this.parseClass(s, !0);
      case types._if:
        return this.parseIfStatement(s);
      case types._return:
        return this.parseReturnStatement(s);
      case types._switch:
        return this.parseSwitchStatement(s);
      case types._throw:
        return this.parseThrowStatement(s);
      case types._try:
        return this.parseTryStatement(s);
      case types._const:
      case types._var:
        return (
          (n = n || this.value),
          e && 'var' !== n && this.unexpected(),
          this.parseVarStatement(s, n)
        );
      case types._while:
        return this.parseWhileStatement(s);
      case types._with:
        return this.parseWithStatement(s);
      case types.braceL:
        return this.parseBlock(!0, s);
      case types.semi:
        return this.parseEmptyStatement(s);
      case types._export:
      case types._import:
        if (10 < this.options.ecmaVersion && r === types._import) {
          skipWhiteSpace.lastIndex = this.pos;
          var i = skipWhiteSpace.exec(this.input),
            o = this.pos + i[0].length,
            p = this.input.charCodeAt(o);
          if (40 === p || 46 === p)
            return this.parseExpressionStatement(s, this.parseExpression());
        }
        return (
          this.options.allowImportExportEverywhere ||
            (!t &&
              this.raise(
                this.start,
                "'import' and 'export' may only appear at the top level",
              ),
            !this.inModule &&
              this.raise(
                this.start,
                "'import' and 'export' may appear only with 'sourceType: module'",
              )),
          r === types._import ? this.parseImport(s) : this.parseExport(s, a)
        );
      default:
        if (this.isAsyncFunction())
          return (
            e && this.unexpected(),
            this.next(),
            this.parseFunctionStatement(s, !0, !e)
          );
        var c = this.value,
          l = this.parseExpression();
        return r === types.name &&
          'Identifier' === l.type &&
          this.eat(types.colon)
          ? this.parseLabeledStatement(s, c, l, e)
          : this.parseExpressionStatement(s, l);
    }
  }),
  (pp$1.parseBreakContinueStatement = function (e, t) {
    var a = 'break' === t;
    this.next(),
      this.eat(types.semi) || this.insertSemicolon()
        ? (e.label = null)
        : this.type === types.name
        ? ((e.label = this.parseIdent()), this.semicolon())
        : this.unexpected();
    for (var n, r = 0; r < this.labels.length; ++r)
      if (((n = this.labels[r]), null == e.label || n.name === e.label.name)) {
        if (null != n.kind && (a || 'loop' === n.kind)) break;
        if (e.label && a) break;
      }
    return (
      r === this.labels.length && this.raise(e.start, 'Unsyntactic ' + t),
      this.finishNode(e, a ? 'BreakStatement' : 'ContinueStatement')
    );
  }),
  (pp$1.parseDebuggerStatement = function (e) {
    return (
      this.next(), this.semicolon(), this.finishNode(e, 'DebuggerStatement')
    );
  }),
  (pp$1.parseDoStatement = function (e) {
    return (
      this.next(),
      this.labels.push(loopLabel),
      (e.body = this.parseStatement('do')),
      this.labels.pop(),
      this.expect(types._while),
      (e.test = this.parseParenExpression()),
      6 <= this.options.ecmaVersion ? this.eat(types.semi) : this.semicolon(),
      this.finishNode(e, 'DoWhileStatement')
    );
  }),
  (pp$1.parseForStatement = function (e) {
    this.next();
    var t =
      9 <= this.options.ecmaVersion &&
      this.canAwait &&
      this.eatContextual('await')
        ? this.lastTokStart
        : -1;
    if (
      (this.labels.push(loopLabel),
      this.enterScope(0),
      this.expect(types.parenL),
      this.type === types.semi)
    )
      return -1 < t && this.unexpected(t), this.parseFor(e, null);
    var a = this.isLet();
    if (this.type === types._var || this.type === types._const || a) {
      var n = this.startNode(),
        r = a ? 'let' : this.value;
      return (this.next(),
      this.parseVar(n, !0, r),
      this.finishNode(n, 'VariableDeclaration'),
      (this.type === types._in ||
        (6 <= this.options.ecmaVersion && this.isContextual('of'))) &&
        1 === n.declarations.length)
        ? (9 <= this.options.ecmaVersion &&
            (this.type === types._in
              ? -1 < t && this.unexpected(t)
              : (e.await = -1 < t)),
          this.parseForIn(e, n))
        : (-1 < t && this.unexpected(t), this.parseFor(e, n));
    }
    var s = new DestructuringErrors(),
      i = this.parseExpression(!(-1 < t) || 'await', s);
    return this.type === types._in ||
      (6 <= this.options.ecmaVersion && this.isContextual('of'))
      ? (9 <= this.options.ecmaVersion &&
          (this.type === types._in
            ? -1 < t && this.unexpected(t)
            : (e.await = -1 < t)),
        this.toAssignable(i, !1, s),
        this.checkLValPattern(i),
        this.parseForIn(e, i))
      : (this.checkExpressionErrors(s, !0),
        -1 < t && this.unexpected(t),
        this.parseFor(e, i));
  }),
  (pp$1.parseFunctionStatement = function (e, t, a) {
    return (
      this.next(),
      this.parseFunction(
        e,
        FUNC_STATEMENT | (a ? 0 : FUNC_HANGING_STATEMENT),
        !1,
        t,
      )
    );
  }),
  (pp$1.parseIfStatement = function (e) {
    return (
      this.next(),
      (e.test = this.parseParenExpression()),
      (e.consequent = this.parseStatement('if')),
      (e.alternate = this.eat(types._else) ? this.parseStatement('if') : null),
      this.finishNode(e, 'IfStatement')
    );
  }),
  (pp$1.parseReturnStatement = function (e) {
    return (
      this.inFunction ||
        this.options.allowReturnOutsideFunction ||
        this.raise(this.start, "'return' outside of function"),
      this.next(),
      this.eat(types.semi) || this.insertSemicolon()
        ? (e.argument = null)
        : ((e.argument = this.parseExpression()), this.semicolon()),
      this.finishNode(e, 'ReturnStatement')
    );
  }),
  (pp$1.parseSwitchStatement = function (e) {
    this.next(),
      (e.discriminant = this.parseParenExpression()),
      (e.cases = []),
      this.expect(types.braceL),
      this.labels.push(switchLabel),
      this.enterScope(0);
    for (var t, a = !1; this.type !== types.braceR; )
      if (this.type === types._case || this.type === types._default) {
        var n = this.type === types._case;
        t && this.finishNode(t, 'SwitchCase'),
          e.cases.push((t = this.startNode())),
          (t.consequent = []),
          this.next(),
          n
            ? (t.test = this.parseExpression())
            : (a &&
                this.raiseRecoverable(
                  this.lastTokStart,
                  'Multiple default clauses',
                ),
              (a = !0),
              (t.test = null)),
          this.expect(types.colon);
      } else
        t || this.unexpected(), t.consequent.push(this.parseStatement(null));
    return (
      this.exitScope(),
      t && this.finishNode(t, 'SwitchCase'),
      this.next(),
      this.labels.pop(),
      this.finishNode(e, 'SwitchStatement')
    );
  }),
  (pp$1.parseThrowStatement = function (e) {
    return (
      this.next(),
      lineBreak.test(this.input.slice(this.lastTokEnd, this.start)) &&
        this.raise(this.lastTokEnd, 'Illegal newline after throw'),
      (e.argument = this.parseExpression()),
      this.semicolon(),
      this.finishNode(e, 'ThrowStatement')
    );
  });
var empty = [];
(pp$1.parseTryStatement = function (e) {
  if (
    (this.next(),
    (e.block = this.parseBlock()),
    (e.handler = null),
    this.type === types._catch)
  ) {
    var t = this.startNode();
    if ((this.next(), this.eat(types.parenL))) {
      t.param = this.parseBindingAtom();
      var a = 'Identifier' === t.param.type;
      this.enterScope(a ? SCOPE_SIMPLE_CATCH : 0),
        this.checkLValPattern(t.param, a ? BIND_SIMPLE_CATCH : BIND_LEXICAL),
        this.expect(types.parenR);
    } else
      10 > this.options.ecmaVersion && this.unexpected(),
        (t.param = null),
        this.enterScope(0);
    (t.body = this.parseBlock(!1)),
      this.exitScope(),
      (e.handler = this.finishNode(t, 'CatchClause'));
  }
  return (
    (e.finalizer = this.eat(types._finally) ? this.parseBlock() : null),
    e.handler ||
      e.finalizer ||
      this.raise(e.start, 'Missing catch or finally clause'),
    this.finishNode(e, 'TryStatement')
  );
}),
  (pp$1.parseVarStatement = function (e, t) {
    return (
      this.next(),
      this.parseVar(e, !1, t),
      this.semicolon(),
      this.finishNode(e, 'VariableDeclaration')
    );
  }),
  (pp$1.parseWhileStatement = function (e) {
    return (
      this.next(),
      (e.test = this.parseParenExpression()),
      this.labels.push(loopLabel),
      (e.body = this.parseStatement('while')),
      this.labels.pop(),
      this.finishNode(e, 'WhileStatement')
    );
  }),
  (pp$1.parseWithStatement = function (e) {
    return (
      this.strict && this.raise(this.start, "'with' in strict mode"),
      this.next(),
      (e.object = this.parseParenExpression()),
      (e.body = this.parseStatement('with')),
      this.finishNode(e, 'WithStatement')
    );
  }),
  (pp$1.parseEmptyStatement = function (e) {
    return this.next(), this.finishNode(e, 'EmptyStatement');
  }),
  (pp$1.parseLabeledStatement = function (e, t, a, n) {
    for (var r, s = 0, o = this.labels; s < o.length; s += 1)
      (r = o[s]),
        r.name === t &&
          this.raise(a.start, "Label '" + t + "' is already declared");
    for (
      var p,
        c = this.type.isLoop
          ? 'loop'
          : this.type === types._switch
          ? 'switch'
          : null,
        l = this.labels.length - 1;
      0 <= l && ((p = this.labels[l]), p.statementStart === e.start);
      l--
    )
      (p.statementStart = this.start), (p.kind = c);
    return (
      this.labels.push({ name: t, kind: c, statementStart: this.start }),
      (e.body = this.parseStatement(
        n ? (-1 === n.indexOf('label') ? n + 'label' : n) : 'label',
      )),
      this.labels.pop(),
      (e.label = a),
      this.finishNode(e, 'LabeledStatement')
    );
  }),
  (pp$1.parseExpressionStatement = function (e, t) {
    return (
      (e.expression = t),
      this.semicolon(),
      this.finishNode(e, 'ExpressionStatement')
    );
  }),
  (pp$1.parseBlock = function (e, t, a) {
    for (
      void 0 === e && (e = !0),
        void 0 === t && (t = this.startNode()),
        t.body = [],
        this.expect(types.braceL),
        e && this.enterScope(0);
      this.type !== types.braceR;

    ) {
      var n = this.parseStatement(null);
      t.body.push(n);
    }
    return (
      a && (this.strict = !1),
      this.next(),
      e && this.exitScope(),
      this.finishNode(t, 'BlockStatement')
    );
  }),
  (pp$1.parseFor = function (e, t) {
    return (
      (e.init = t),
      this.expect(types.semi),
      (e.test = this.type === types.semi ? null : this.parseExpression()),
      this.expect(types.semi),
      (e.update = this.type === types.parenR ? null : this.parseExpression()),
      this.expect(types.parenR),
      (e.body = this.parseStatement('for')),
      this.exitScope(),
      this.labels.pop(),
      this.finishNode(e, 'ForStatement')
    );
  }),
  (pp$1.parseForIn = function (e, t) {
    var a = this.type === types._in;
    return (
      this.next(),
      'VariableDeclaration' === t.type &&
        null != t.declarations[0].init &&
        (!a ||
          8 > this.options.ecmaVersion ||
          this.strict ||
          'var' !== t.kind ||
          'Identifier' !== t.declarations[0].id.type) &&
        this.raise(
          t.start,
          (a ? 'for-in' : 'for-of') +
            ' loop variable declaration may not have an initializer',
        ),
      (e.left = t),
      (e.right = a ? this.parseExpression() : this.parseMaybeAssign()),
      this.expect(types.parenR),
      (e.body = this.parseStatement('for')),
      this.exitScope(),
      this.labels.pop(),
      this.finishNode(e, a ? 'ForInStatement' : 'ForOfStatement')
    );
  }),
  (pp$1.parseVar = function (e, t, a) {
    for (e.declarations = [], e.kind = a; ; ) {
      var n = this.startNode();
      if (
        (this.parseVarId(n, a),
        this.eat(types.eq)
          ? (n.init = this.parseMaybeAssign(t))
          : 'const' !== a ||
            this.type === types._in ||
            (6 <= this.options.ecmaVersion && this.isContextual('of'))
          ? 'Identifier' === n.id.type ||
            (t && (this.type === types._in || this.isContextual('of')))
            ? (n.init = null)
            : this.raise(
                this.lastTokEnd,
                'Complex binding patterns require an initialization value',
              )
          : this.unexpected(),
        e.declarations.push(this.finishNode(n, 'VariableDeclarator')),
        !this.eat(types.comma))
      )
        break;
    }
    return e;
  }),
  (pp$1.parseVarId = function (e, t) {
    (e.id = this.parseBindingAtom()),
      this.checkLValPattern(e.id, 'var' === t ? BIND_VAR : BIND_LEXICAL, !1);
  });
var FUNC_STATEMENT = 1,
  FUNC_HANGING_STATEMENT = 2,
  FUNC_NULLABLE_ID = 4;
(pp$1.parseFunction = function (e, t, a, n) {
  this.initFunction(e),
    (9 <= this.options.ecmaVersion || (6 <= this.options.ecmaVersion && !n)) &&
      (this.type === types.star &&
        t & FUNC_HANGING_STATEMENT &&
        this.unexpected(),
      (e.generator = this.eat(types.star))),
    8 <= this.options.ecmaVersion && (e.async = !!n),
    t & FUNC_STATEMENT &&
      ((e.id =
        t & FUNC_NULLABLE_ID && this.type !== types.name
          ? null
          : this.parseIdent()),
      e.id &&
        !(t & FUNC_HANGING_STATEMENT) &&
        this.checkLValSimple(
          e.id,
          this.strict || e.generator || e.async
            ? this.treatFunctionsAsVar
              ? BIND_VAR
              : BIND_LEXICAL
            : BIND_FUNCTION,
        ));
  var r = this.yieldPos,
    s = this.awaitPos,
    i = this.awaitIdentPos;
  return (
    (this.yieldPos = 0),
    (this.awaitPos = 0),
    (this.awaitIdentPos = 0),
    this.enterScope(functionFlags(e.async, e.generator)),
    t & FUNC_STATEMENT ||
      (e.id = this.type === types.name ? this.parseIdent() : null),
    this.parseFunctionParams(e),
    this.parseFunctionBody(e, a, !1),
    (this.yieldPos = r),
    (this.awaitPos = s),
    (this.awaitIdentPos = i),
    this.finishNode(
      e,
      t & FUNC_STATEMENT ? 'FunctionDeclaration' : 'FunctionExpression',
    )
  );
}),
  (pp$1.parseFunctionParams = function (e) {
    this.expect(types.parenL),
      (e.params = this.parseBindingList(
        types.parenR,
        !1,
        8 <= this.options.ecmaVersion,
      )),
      this.checkYieldAwaitInDefaultParams();
  }),
  (pp$1.parseClass = function (e, t) {
    this.next();
    var a = this.strict;
    (this.strict = !0), this.parseClassId(e, t), this.parseClassSuper(e);
    var n = this.enterClassBody(),
      r = this.startNode(),
      s = !1;
    for (r.body = [], this.expect(types.braceL); this.type !== types.braceR; ) {
      var i = this.parseClassElement(null !== e.superClass);
      i &&
        (r.body.push(i),
        'MethodDefinition' === i.type && 'constructor' === i.kind
          ? (s &&
              this.raise(i.start, 'Duplicate constructor in the same class'),
            (s = !0))
          : 'PrivateIdentifier' === i.key.type &&
            isPrivateNameConflicted(n, i) &&
            this.raiseRecoverable(
              i.key.start,
              "Identifier '#" + i.key.name + "' has already been declared",
            ));
    }
    return (
      (this.strict = a),
      this.next(),
      (e.body = this.finishNode(r, 'ClassBody')),
      this.exitClassBody(),
      this.finishNode(e, t ? 'ClassDeclaration' : 'ClassExpression')
    );
  }),
  (pp$1.parseClassElement = function (e) {
    if (this.eat(types.semi)) return null;
    var t = this.options.ecmaVersion,
      a = this.startNode(),
      n = '',
      r = !1,
      s = !1,
      i = 'method';
    if (
      ((a.static = !1),
      this.eatContextual('static') &&
        (this.isClassElementNameStart() || this.type === types.star
          ? (a.static = !0)
          : (n = 'static')),
      !n &&
        8 <= t &&
        this.eatContextual('async') &&
        ((this.isClassElementNameStart() || this.type === types.star) &&
        !this.canInsertSemicolon()
          ? (s = !0)
          : (n = 'async')),
      !n && (9 <= t || !s) && this.eat(types.star) && (r = !0),
      !n && !s && !r)
    ) {
      var o = this.value;
      (this.eatContextual('get') || this.eatContextual('set')) &&
        (this.isClassElementNameStart() ? (i = o) : (n = o));
    }
    if (
      (n
        ? ((a.computed = !1),
          (a.key = this.startNodeAt(this.lastTokStart, this.lastTokStartLoc)),
          (a.key.name = n),
          this.finishNode(a.key, 'Identifier'))
        : this.parseClassElementName(a),
      13 > t || this.type === types.parenL || 'method' !== i || r || s)
    ) {
      var p = !a.static && checkKeyName(a, 'constructor');
      p &&
        'method' !== i &&
        this.raise(a.key.start, "Constructor can't have get/set modifier"),
        (a.kind = p ? 'constructor' : i),
        this.parseClassMethod(a, r, s, p && e);
    } else this.parseClassField(a);
    return a;
  }),
  (pp$1.isClassElementNameStart = function () {
    return (
      this.type === types.name ||
      this.type === types.privateId ||
      this.type === types.num ||
      this.type === types.string ||
      this.type === types.bracketL ||
      this.type.keyword
    );
  }),
  (pp$1.parseClassElementName = function (e) {
    this.type === types.privateId
      ? ('constructor' === this.value &&
          this.raise(
            this.start,
            "Classes can't have an element named '#constructor'",
          ),
        (e.computed = !1),
        (e.key = this.parsePrivateIdent()))
      : this.parsePropertyName(e);
  }),
  (pp$1.parseClassMethod = function (e, t, a, n) {
    var r = e.key;
    'constructor' === e.kind
      ? (t && this.raise(r.start, "Constructor can't be a generator"),
        a && this.raise(r.start, "Constructor can't be an async method"))
      : e.static &&
        checkKeyName(e, 'prototype') &&
        this.raise(
          r.start,
          'Classes may not have a static property named prototype',
        );
    var s = (e.value = this.parseMethod(t, a, n));
    return (
      'get' === e.kind &&
        0 !== s.params.length &&
        this.raiseRecoverable(s.start, 'getter should have no params'),
      'set' === e.kind &&
        1 !== s.params.length &&
        this.raiseRecoverable(s.start, 'setter should have exactly one param'),
      'set' === e.kind &&
        'RestElement' === s.params[0].type &&
        this.raiseRecoverable(
          s.params[0].start,
          'Setter cannot use rest params',
        ),
      this.finishNode(e, 'MethodDefinition')
    );
  }),
  (pp$1.parseClassField = function (e) {
    if (
      (checkKeyName(e, 'constructor')
        ? this.raise(
            e.key.start,
            "Classes can't have a field named 'constructor'",
          )
        : e.static &&
          checkKeyName(e, 'prototype') &&
          this.raise(
            e.key.start,
            "Classes can't have a static field named 'prototype'",
          ),
      this.eat(types.eq))
    ) {
      var t = this.currentThisScope(),
        a = t.inClassFieldInit;
      (t.inClassFieldInit = !0),
        (e.value = this.parseMaybeAssign()),
        (t.inClassFieldInit = a);
    } else e.value = null;
    return this.semicolon(), this.finishNode(e, 'PropertyDefinition');
  }),
  (pp$1.parseClassId = function (e, t) {
    this.type === types.name
      ? ((e.id = this.parseIdent()),
        t && this.checkLValSimple(e.id, BIND_LEXICAL, !1))
      : (!0 === t && this.unexpected(), (e.id = null));
  }),
  (pp$1.parseClassSuper = function (e) {
    e.superClass = this.eat(types._extends) ? this.parseExprSubscripts() : null;
  }),
  (pp$1.enterClassBody = function () {
    var e = { declared: Object.create(null), used: [] };
    return this.privateNameStack.push(e), e.declared;
  }),
  (pp$1.exitClassBody = function () {
    for (
      var e,
        t = this.privateNameStack.pop(),
        a = t.declared,
        n = t.used,
        r = this.privateNameStack.length,
        s = 0 === r ? null : this.privateNameStack[r - 1],
        o = 0;
      o < n.length;
      ++o
    )
      (e = n[o]),
        has(a, e.name) ||
          (s
            ? s.used.push(e)
            : this.raiseRecoverable(
                e.start,
                "Private field '#" +
                  e.name +
                  "' must be declared in an enclosing class",
              ));
  });
function isPrivateNameConflicted(e, t) {
  var a = t.key.name,
    n = e[a],
    r = 'true';
  return (
    'MethodDefinition' === t.type &&
      ('get' === t.kind || 'set' === t.kind) &&
      (r = (t.static ? 's' : 'i') + t.kind),
    ('iget' === n && 'iset' === r) ||
    ('iset' === n && 'iget' === r) ||
    ('sget' === n && 'sset' === r) ||
    ('sset' === n && 'sget' === r)
      ? ((e[a] = 'true'), !1)
      : !!n || ((e[a] = r), !1)
  );
}
function checkKeyName(e, t) {
  var a = e.computed,
    n = e.key;
  return (
    !a &&
    (('Identifier' === n.type && n.name === t) ||
      ('Literal' === n.type && n.value === t))
  );
}
(pp$1.parseExport = function (e, t) {
  if ((this.next(), this.eat(types.star)))
    return (
      11 <= this.options.ecmaVersion &&
        (this.eatContextual('as')
          ? ((e.exported = this.parseIdent(!0)),
            this.checkExport(t, e.exported.name, this.lastTokStart))
          : (e.exported = null)),
      this.expectContextual('from'),
      this.type !== types.string && this.unexpected(),
      (e.source = this.parseExprAtom()),
      this.semicolon(),
      this.finishNode(e, 'ExportAllDeclaration')
    );
  if (this.eat(types._default)) {
    this.checkExport(t, 'default', this.lastTokStart);
    var a;
    if (this.type === types._function || (a = this.isAsyncFunction())) {
      var n = this.startNode();
      this.next(),
        a && this.next(),
        (e.declaration = this.parseFunction(n, 5, !1, a));
    } else if (this.type === types._class) {
      var r = this.startNode();
      e.declaration = this.parseClass(r, 'nullableID');
    } else (e.declaration = this.parseMaybeAssign()), this.semicolon();
    return this.finishNode(e, 'ExportDefaultDeclaration');
  }
  if (this.shouldParseExportStatement())
    (e.declaration = this.parseStatement(null)),
      'VariableDeclaration' === e.declaration.type
        ? this.checkVariableExport(t, e.declaration.declarations)
        : this.checkExport(t, e.declaration.id.name, e.declaration.id.start),
      (e.specifiers = []),
      (e.source = null);
  else {
    if (
      ((e.declaration = null),
      (e.specifiers = this.parseExportSpecifiers(t)),
      this.eatContextual('from'))
    )
      this.type !== types.string && this.unexpected(),
        (e.source = this.parseExprAtom());
    else {
      for (var s, o = 0, p = e.specifiers; o < p.length; o += 1)
        (s = p[o]),
          this.checkUnreserved(s.local),
          this.checkLocalExport(s.local);
      e.source = null;
    }
    this.semicolon();
  }
  return this.finishNode(e, 'ExportNamedDeclaration');
}),
  (pp$1.checkExport = function (e, t, a) {
    e &&
      (has(e, t) && this.raiseRecoverable(a, "Duplicate export '" + t + "'"),
      (e[t] = !0));
  }),
  (pp$1.checkPatternExport = function (e, t) {
    var a = t.type;
    if ('Identifier' === a) this.checkExport(e, t.name, t.start);
    else if ('ObjectPattern' === a)
      for (var n, r = 0, s = t.properties; r < s.length; r += 1)
        (n = s[r]), this.checkPatternExport(e, n);
    else if ('ArrayPattern' === a)
      for (var o, p = 0, c = t.elements; p < c.length; p += 1)
        (o = c[p]), o && this.checkPatternExport(e, o);
    else
      'Property' === a
        ? this.checkPatternExport(e, t.value)
        : 'AssignmentPattern' === a
        ? this.checkPatternExport(e, t.left)
        : 'RestElement' === a
        ? this.checkPatternExport(e, t.argument)
        : 'ParenthesizedExpression' === a &&
          this.checkPatternExport(e, t.expression);
  }),
  (pp$1.checkVariableExport = function (e, t) {
    if (e)
      for (var a, n = 0, r = t; n < r.length; n += 1)
        (a = r[n]), this.checkPatternExport(e, a.id);
  }),
  (pp$1.shouldParseExportStatement = function () {
    return (
      'var' === this.type.keyword ||
      'const' === this.type.keyword ||
      'class' === this.type.keyword ||
      'function' === this.type.keyword ||
      this.isLet() ||
      this.isAsyncFunction()
    );
  }),
  (pp$1.parseExportSpecifiers = function (e) {
    var t = [],
      a = !0;
    for (this.expect(types.braceL); !this.eat(types.braceR); ) {
      if (!!a) a = !1;
      else if (
        (this.expect(types.comma), this.afterTrailingComma(types.braceR))
      )
        break;
      var n = this.startNode();
      (n.local = this.parseIdent(!0)),
        (n.exported = this.eatContextual('as') ? this.parseIdent(!0) : n.local),
        this.checkExport(e, n.exported.name, n.exported.start),
        t.push(this.finishNode(n, 'ExportSpecifier'));
    }
    return t;
  }),
  (pp$1.parseImport = function (e) {
    return (
      this.next(),
      this.type === types.string
        ? ((e.specifiers = empty), (e.source = this.parseExprAtom()))
        : ((e.specifiers = this.parseImportSpecifiers()),
          this.expectContextual('from'),
          (e.source =
            this.type === types.string
              ? this.parseExprAtom()
              : this.unexpected())),
      this.semicolon(),
      this.finishNode(e, 'ImportDeclaration')
    );
  }),
  (pp$1.parseImportSpecifiers = function () {
    var e = [],
      t = !0;
    if (this.type === types.name) {
      var a = this.startNode();
      if (
        ((a.local = this.parseIdent()),
        this.checkLValSimple(a.local, BIND_LEXICAL),
        e.push(this.finishNode(a, 'ImportDefaultSpecifier')),
        !this.eat(types.comma))
      )
        return e;
    }
    if (this.type === types.star) {
      var n = this.startNode();
      return (
        this.next(),
        this.expectContextual('as'),
        (n.local = this.parseIdent()),
        this.checkLValSimple(n.local, BIND_LEXICAL),
        e.push(this.finishNode(n, 'ImportNamespaceSpecifier')),
        e
      );
    }
    for (this.expect(types.braceL); !this.eat(types.braceR); ) {
      if (!!t) t = !1;
      else if (
        (this.expect(types.comma), this.afterTrailingComma(types.braceR))
      )
        break;
      var r = this.startNode();
      (r.imported = this.parseIdent(!0)),
        this.eatContextual('as')
          ? (r.local = this.parseIdent())
          : (this.checkUnreserved(r.imported), (r.local = r.imported)),
        this.checkLValSimple(r.local, BIND_LEXICAL),
        e.push(this.finishNode(r, 'ImportSpecifier'));
    }
    return e;
  }),
  (pp$1.adaptDirectivePrologue = function (e) {
    for (var t = 0; t < e.length && this.isDirectiveCandidate(e[t]); ++t)
      e[t].directive = e[t].expression.raw.slice(1, -1);
  }),
  (pp$1.isDirectiveCandidate = function (e) {
    return (
      'ExpressionStatement' === e.type &&
      'Literal' === e.expression.type &&
      'string' == typeof e.expression.value &&
      ('"' === this.input[e.start] || "'" === this.input[e.start])
    );
  });
var pp$2 = Parser.prototype;
(pp$2.toAssignable = function (e, t, a) {
  if (6 <= this.options.ecmaVersion && e)
    switch (e.type) {
      case 'Identifier':
        this.inAsync &&
          'await' === e.name &&
          this.raise(
            e.start,
            "Cannot use 'await' as identifier inside an async function",
          );
        break;
      case 'ObjectPattern':
      case 'ArrayPattern':
      case 'AssignmentPattern':
      case 'RestElement':
        break;
      case 'ObjectExpression':
        (e.type = 'ObjectPattern'), a && this.checkPatternErrors(a, !0);
        for (var n, r = 0, s = e.properties; r < s.length; r += 1)
          (n = s[r]),
            this.toAssignable(n, t),
            'RestElement' === n.type &&
              ('ArrayPattern' === n.argument.type ||
                'ObjectPattern' === n.argument.type) &&
              this.raise(n.argument.start, 'Unexpected token');
        break;
      case 'Property':
        'init' !== e.kind &&
          this.raise(
            e.key.start,
            "Object pattern can't contain getter or setter",
          ),
          this.toAssignable(e.value, t);
        break;
      case 'ArrayExpression':
        (e.type = 'ArrayPattern'),
          a && this.checkPatternErrors(a, !0),
          this.toAssignableList(e.elements, t);
        break;
      case 'SpreadElement':
        (e.type = 'RestElement'),
          this.toAssignable(e.argument, t),
          'AssignmentPattern' === e.argument.type &&
            this.raise(
              e.argument.start,
              'Rest elements cannot have a default value',
            );
        break;
      case 'AssignmentExpression':
        '=' !== e.operator &&
          this.raise(
            e.left.end,
            "Only '=' operator can be used for specifying default value.",
          ),
          (e.type = 'AssignmentPattern'),
          delete e.operator,
          this.toAssignable(e.left, t);
        break;
      case 'ParenthesizedExpression':
        this.toAssignable(e.expression, t, a);
        break;
      case 'ChainExpression':
        this.raiseRecoverable(
          e.start,
          'Optional chaining cannot appear in left-hand side',
        );
        break;
      case 'MemberExpression':
        if (!t) break;
      default:
        this.raise(e.start, 'Assigning to rvalue');
    }
  else a && this.checkPatternErrors(a, !0);
  return e;
}),
  (pp$2.toAssignableList = function (e, t) {
    for (var a, n = e.length, r = 0; r < n; r++)
      (a = e[r]), a && this.toAssignable(a, t);
    if (n) {
      var s = e[n - 1];
      6 === this.options.ecmaVersion &&
        t &&
        s &&
        'RestElement' === s.type &&
        'Identifier' !== s.argument.type &&
        this.unexpected(s.argument.start);
    }
    return e;
  }),
  (pp$2.parseSpread = function (e) {
    var t = this.startNode();
    return (
      this.next(),
      (t.argument = this.parseMaybeAssign(!1, e)),
      this.finishNode(t, 'SpreadElement')
    );
  }),
  (pp$2.parseRestBinding = function () {
    var e = this.startNode();
    return (
      this.next(),
      6 === this.options.ecmaVersion &&
        this.type !== types.name &&
        this.unexpected(),
      (e.argument = this.parseBindingAtom()),
      this.finishNode(e, 'RestElement')
    );
  }),
  (pp$2.parseBindingAtom = function () {
    if (6 <= this.options.ecmaVersion)
      switch (this.type) {
        case types.bracketL:
          var e = this.startNode();
          return (
            this.next(),
            (e.elements = this.parseBindingList(types.bracketR, !0, !0)),
            this.finishNode(e, 'ArrayPattern')
          );
        case types.braceL:
          return this.parseObj(!0);
      }
    return this.parseIdent();
  }),
  (pp$2.parseBindingList = function (e, t, a) {
    for (var n = [], r = !0; !this.eat(e); )
      if (
        (r ? (r = !1) : this.expect(types.comma),
        t && this.type === types.comma)
      )
        n.push(null);
      else if (a && this.afterTrailingComma(e)) break;
      else if (this.type === types.ellipsis) {
        var s = this.parseRestBinding();
        this.parseBindingListItem(s),
          n.push(s),
          this.type === types.comma &&
            this.raise(
              this.start,
              'Comma is not permitted after the rest element',
            ),
          this.expect(e);
        break;
      } else {
        var i = this.parseMaybeDefault(this.start, this.startLoc);
        this.parseBindingListItem(i), n.push(i);
      }
    return n;
  }),
  (pp$2.parseBindingListItem = function (e) {
    return e;
  }),
  (pp$2.parseMaybeDefault = function (e, t, a) {
    if (
      ((a = a || this.parseBindingAtom()),
      6 > this.options.ecmaVersion || !this.eat(types.eq))
    )
      return a;
    var n = this.startNodeAt(e, t);
    return (
      (n.left = a),
      (n.right = this.parseMaybeAssign()),
      this.finishNode(n, 'AssignmentPattern')
    );
  }),
  (pp$2.checkLValSimple = function (e, t, a) {
    void 0 === t && (t = BIND_NONE);
    var n = t !== BIND_NONE;
    switch (e.type) {
      case 'Identifier':
        this.strict &&
          this.reservedWordsStrictBind.test(e.name) &&
          this.raiseRecoverable(
            e.start,
            (n ? 'Binding ' : 'Assigning to ') + e.name + ' in strict mode',
          ),
          n &&
            (t === BIND_LEXICAL &&
              'let' === e.name &&
              this.raiseRecoverable(
                e.start,
                'let is disallowed as a lexically bound name',
              ),
            a &&
              (has(a, e.name) &&
                this.raiseRecoverable(e.start, 'Argument name clash'),
              (a[e.name] = !0)),
            t !== BIND_OUTSIDE && this.declareName(e.name, t, e.start));
        break;
      case 'ChainExpression':
        this.raiseRecoverable(
          e.start,
          'Optional chaining cannot appear in left-hand side',
        );
        break;
      case 'MemberExpression':
        n && this.raiseRecoverable(e.start, 'Binding member expression');
        break;
      case 'ParenthesizedExpression':
        return (
          n &&
            this.raiseRecoverable(e.start, 'Binding parenthesized expression'),
          this.checkLValSimple(e.expression, t, a)
        );
      default:
        this.raise(e.start, (n ? 'Binding' : 'Assigning to') + ' rvalue');
    }
  }),
  (pp$2.checkLValPattern = function (e, t, a) {
    switch ((void 0 === t && (t = BIND_NONE), e.type)) {
      case 'ObjectPattern':
        for (var n, r = 0, s = e.properties; r < s.length; r += 1)
          (n = s[r]), this.checkLValInnerPattern(n, t, a);
        break;
      case 'ArrayPattern':
        for (var o, p = 0, c = e.elements; p < c.length; p += 1)
          (o = c[p]), o && this.checkLValInnerPattern(o, t, a);
        break;
      default:
        this.checkLValSimple(e, t, a);
    }
  }),
  (pp$2.checkLValInnerPattern = function (e, t, a) {
    switch ((void 0 === t && (t = BIND_NONE), e.type)) {
      case 'Property':
        this.checkLValInnerPattern(e.value, t, a);
        break;
      case 'AssignmentPattern':
        this.checkLValPattern(e.left, t, a);
        break;
      case 'RestElement':
        this.checkLValPattern(e.argument, t, a);
        break;
      default:
        this.checkLValPattern(e, t, a);
    }
  });
var pp$3 = Parser.prototype;
(pp$3.checkPropClash = function (e, t, a) {
  if (
    !(9 <= this.options.ecmaVersion && 'SpreadElement' === e.type) &&
    !(6 <= this.options.ecmaVersion && (e.computed || e.method || e.shorthand))
  ) {
    var n,
      r = e.key;
    switch (r.type) {
      case 'Identifier':
        n = r.name;
        break;
      case 'Literal':
        n = r.value + '';
        break;
      default:
        return;
    }
    var s = e.kind;
    if (6 <= this.options.ecmaVersion)
      return void (
        '__proto__' === n &&
        'init' === s &&
        (t.proto &&
          (a
            ? 0 > a.doubleProto && (a.doubleProto = r.start)
            : this.raiseRecoverable(
                r.start,
                'Redefinition of __proto__ property',
              )),
        (t.proto = !0))
      );
    n = '$' + n;
    var i = t[n];
    if (i) {
      var o;
      (o =
        'init' === s
          ? (this.strict && i.init) || i.get || i.set
          : i.init || i[s]),
        o && this.raiseRecoverable(r.start, 'Redefinition of property');
    } else i = t[n] = { init: !1, get: !1, set: !1 };
    i[s] = !0;
  }
}),
  (pp$3.parseExpression = function (e, t) {
    var a = this.start,
      n = this.startLoc,
      r = this.parseMaybeAssign(e, t);
    if (this.type === types.comma) {
      var s = this.startNodeAt(a, n);
      for (s.expressions = [r]; this.eat(types.comma); )
        s.expressions.push(this.parseMaybeAssign(e, t));
      return this.finishNode(s, 'SequenceExpression');
    }
    return r;
  }),
  (pp$3.parseMaybeAssign = function (e, t, a) {
    if (this.isContextual('yield')) {
      if (this.inGenerator) return this.parseYield(e);
      this.exprAllowed = !1;
    }
    var n = !1,
      r = -1,
      s = -1;
    t
      ? ((r = t.parenthesizedAssign),
        (s = t.trailingComma),
        (t.parenthesizedAssign = t.trailingComma = -1))
      : ((t = new DestructuringErrors()), (n = !0));
    var i = this.start,
      o = this.startLoc;
    (this.type === types.parenL || this.type === types.name) &&
      ((this.potentialArrowAt = this.start),
      (this.potentialArrowInForAwait = 'await' === e));
    var p = this.parseMaybeConditional(e, t);
    if ((a && (p = a.call(this, p, i, o)), this.type.isAssign)) {
      var c = this.startNodeAt(i, o);
      return (
        (c.operator = this.value),
        this.type === types.eq && (p = this.toAssignable(p, !1, t)),
        n || (t.parenthesizedAssign = t.trailingComma = t.doubleProto = -1),
        t.shorthandAssign >= p.start && (t.shorthandAssign = -1),
        this.type === types.eq
          ? this.checkLValPattern(p)
          : this.checkLValSimple(p),
        (c.left = p),
        this.next(),
        (c.right = this.parseMaybeAssign(e)),
        this.finishNode(c, 'AssignmentExpression')
      );
    }
    return (
      n && this.checkExpressionErrors(t, !0),
      -1 < r && (t.parenthesizedAssign = r),
      -1 < s && (t.trailingComma = s),
      p
    );
  }),
  (pp$3.parseMaybeConditional = function (e, t) {
    var a = this.start,
      n = this.startLoc,
      r = this.parseExprOps(e, t);
    if (this.checkExpressionErrors(t)) return r;
    if (this.eat(types.question)) {
      var s = this.startNodeAt(a, n);
      return (
        (s.test = r),
        (s.consequent = this.parseMaybeAssign()),
        this.expect(types.colon),
        (s.alternate = this.parseMaybeAssign(e)),
        this.finishNode(s, 'ConditionalExpression')
      );
    }
    return r;
  }),
  (pp$3.parseExprOps = function (e, t) {
    var a = this.start,
      n = this.startLoc,
      r = this.parseMaybeUnary(t, !1);
    return this.checkExpressionErrors(t)
      ? r
      : r.start === a && 'ArrowFunctionExpression' === r.type
      ? r
      : this.parseExprOp(r, a, n, -1, e);
  }),
  (pp$3.parseExprOp = function (e, t, a, n, r) {
    var s = this.type.binop;
    if (null != s && (!r || this.type !== types._in) && s > n) {
      var i = this.type === types.logicalOR || this.type === types.logicalAND,
        o = this.type === types.coalesce;
      o && (s = types.logicalAND.binop);
      var p = this.value;
      this.next();
      var c = this.start,
        l = this.startLoc,
        d = this.parseExprOp(this.parseMaybeUnary(null, !1), c, l, s, r),
        u = this.buildBinary(t, a, e, d, p, i || o);
      return (
        ((i && this.type === types.coalesce) ||
          (o &&
            (this.type === types.logicalOR ||
              this.type === types.logicalAND))) &&
          this.raiseRecoverable(
            this.start,
            'Logical expressions and coalesce expressions cannot be mixed. Wrap either by parentheses',
          ),
        this.parseExprOp(u, t, a, n, r)
      );
    }
    return e;
  }),
  (pp$3.buildBinary = function (e, t, a, n, r, s) {
    var i = this.startNodeAt(e, t);
    return (
      (i.left = a),
      (i.operator = r),
      (i.right = n),
      this.finishNode(i, s ? 'LogicalExpression' : 'BinaryExpression')
    );
  }),
  (pp$3.parseMaybeUnary = function (e, t, a) {
    var n,
      r = this.start,
      s = this.startLoc;
    if (this.isContextual('await') && this.canAwait)
      (n = this.parseAwait()), (t = !0);
    else if (this.type.prefix) {
      var i = this.startNode(),
        o = this.type === types.incDec;
      (i.operator = this.value),
        (i.prefix = !0),
        this.next(),
        (i.argument = this.parseMaybeUnary(null, !0, o)),
        this.checkExpressionErrors(e, !0),
        o
          ? this.checkLValSimple(i.argument)
          : this.strict &&
            'delete' === i.operator &&
            'Identifier' === i.argument.type
          ? this.raiseRecoverable(
              i.start,
              'Deleting local variable in strict mode',
            )
          : 'delete' === i.operator && isPrivateFieldAccess(i.argument)
          ? this.raiseRecoverable(i.start, 'Private fields can not be deleted')
          : (t = !0),
        (n = this.finishNode(i, o ? 'UpdateExpression' : 'UnaryExpression'));
    } else {
      if (((n = this.parseExprSubscripts(e)), this.checkExpressionErrors(e)))
        return n;
      for (; this.type.postfix && !this.canInsertSemicolon(); ) {
        var p = this.startNodeAt(r, s);
        (p.operator = this.value),
          (p.prefix = !1),
          (p.argument = n),
          this.checkLValSimple(n),
          this.next(),
          (n = this.finishNode(p, 'UpdateExpression'));
      }
    }
    if (a || !this.eat(types.starstar)) return n;
    return t
      ? void this.unexpected(this.lastTokStart)
      : this.buildBinary(r, s, n, this.parseMaybeUnary(null, !1), '**', !1);
  });
function isPrivateFieldAccess(e) {
  return (
    ('MemberExpression' === e.type &&
      'PrivateIdentifier' === e.property.type) ||
    ('ChainExpression' === e.type && isPrivateFieldAccess(e.expression))
  );
}
(pp$3.parseExprSubscripts = function (e) {
  var t = this.start,
    a = this.startLoc,
    n = this.parseExprAtom(e);
  if (
    'ArrowFunctionExpression' === n.type &&
    ')' !== this.input.slice(this.lastTokStart, this.lastTokEnd)
  )
    return n;
  var r = this.parseSubscripts(n, t, a);
  return (
    e &&
      'MemberExpression' === r.type &&
      (e.parenthesizedAssign >= r.start && (e.parenthesizedAssign = -1),
      e.parenthesizedBind >= r.start && (e.parenthesizedBind = -1),
      e.trailingComma >= r.start && (e.trailingComma = -1)),
    r
  );
}),
  (pp$3.parseSubscripts = function (e, t, a, n) {
    for (
      var r,
        s =
          8 <= this.options.ecmaVersion &&
          'Identifier' === e.type &&
          'async' === e.name &&
          this.lastTokEnd === e.end &&
          !this.canInsertSemicolon() &&
          5 == e.end - e.start &&
          this.potentialArrowAt === e.start,
        i = !1;
      ;

    ) {
      if (
        ((r = this.parseSubscript(e, t, a, n, s, i)),
        r.optional && (i = !0),
        r === e || 'ArrowFunctionExpression' === r.type)
      ) {
        if (i) {
          var o = this.startNodeAt(t, a);
          (o.expression = r), (r = this.finishNode(o, 'ChainExpression'));
        }
        return r;
      }
      e = r;
    }
  }),
  (pp$3.parseSubscript = function (e, t, a, n, r, s) {
    var i = 11 <= this.options.ecmaVersion,
      o = i && this.eat(types.questionDot);
    n &&
      o &&
      this.raise(
        this.lastTokStart,
        'Optional chaining cannot appear in the callee of new expressions',
      );
    var p = this.eat(types.bracketL);
    if (
      p ||
      (o && this.type !== types.parenL && this.type !== types.backQuote) ||
      this.eat(types.dot)
    ) {
      var c = this.startNodeAt(t, a);
      (c.object = e),
        p
          ? ((c.property = this.parseExpression()), this.expect(types.bracketR))
          : this.type === types.privateId && 'Super' !== e.type
          ? (c.property = this.parsePrivateIdent())
          : (c.property = this.parseIdent(
              'never' !== this.options.allowReserved,
            )),
        (c.computed = !!p),
        i && (c.optional = o),
        (e = this.finishNode(c, 'MemberExpression'));
    } else if (!n && this.eat(types.parenL)) {
      var l = new DestructuringErrors(),
        d = this.yieldPos,
        u = this.awaitPos,
        m = this.awaitIdentPos;
      (this.yieldPos = 0), (this.awaitPos = 0), (this.awaitIdentPos = 0);
      var h = this.parseExprList(
        types.parenR,
        8 <= this.options.ecmaVersion,
        !1,
        l,
      );
      if (r && !o && !this.canInsertSemicolon() && this.eat(types.arrow))
        return (
          this.checkPatternErrors(l, !1),
          this.checkYieldAwaitInDefaultParams(),
          0 < this.awaitIdentPos &&
            this.raise(
              this.awaitIdentPos,
              "Cannot use 'await' as identifier inside an async function",
            ),
          (this.yieldPos = d),
          (this.awaitPos = u),
          (this.awaitIdentPos = m),
          this.parseArrowExpression(this.startNodeAt(t, a), h, !0)
        );
      this.checkExpressionErrors(l, !0),
        (this.yieldPos = d || this.yieldPos),
        (this.awaitPos = u || this.awaitPos),
        (this.awaitIdentPos = m || this.awaitIdentPos);
      var x = this.startNodeAt(t, a);
      (x.callee = e),
        (x.arguments = h),
        i && (x.optional = o),
        (e = this.finishNode(x, 'CallExpression'));
    } else if (this.type === types.backQuote) {
      (o || s) &&
        this.raise(
          this.start,
          'Optional chaining cannot appear in the tag of tagged template expressions',
        );
      var g = this.startNodeAt(t, a);
      (g.tag = e),
        (g.quasi = this.parseTemplate({ isTagged: !0 })),
        (e = this.finishNode(g, 'TaggedTemplateExpression'));
    }
    return e;
  }),
  (pp$3.parseExprAtom = function (e) {
    this.type === types.slash && this.readRegexp();
    var t,
      a = this.potentialArrowAt === this.start;
    switch (this.type) {
      case types._super:
        return (
          this.allowSuper ||
            this.raise(this.start, "'super' keyword outside a method"),
          (t = this.startNode()),
          this.next(),
          this.type !== types.parenL ||
            this.allowDirectSuper ||
            this.raise(
              t.start,
              'super() call outside constructor of a subclass',
            ),
          this.type !== types.dot &&
            this.type !== types.bracketL &&
            this.type !== types.parenL &&
            this.unexpected(),
          this.finishNode(t, 'Super')
        );
      case types._this:
        return (
          (t = this.startNode()),
          this.next(),
          this.finishNode(t, 'ThisExpression')
        );
      case types.name:
        var n = this.start,
          r = this.startLoc,
          s = this.containsEsc,
          i = this.parseIdent(!1);
        if (
          8 <= this.options.ecmaVersion &&
          !s &&
          'async' === i.name &&
          !this.canInsertSemicolon() &&
          this.eat(types._function)
        )
          return this.parseFunction(this.startNodeAt(n, r), 0, !1, !0);
        if (a && !this.canInsertSemicolon()) {
          if (this.eat(types.arrow))
            return this.parseArrowExpression(this.startNodeAt(n, r), [i], !1);
          if (
            8 <= this.options.ecmaVersion &&
            'async' === i.name &&
            this.type === types.name &&
            !s &&
            (!this.potentialArrowInForAwait ||
              'of' !== this.value ||
              this.containsEsc)
          )
            return (
              (i = this.parseIdent(!1)),
              (this.canInsertSemicolon() || !this.eat(types.arrow)) &&
                this.unexpected(),
              this.parseArrowExpression(this.startNodeAt(n, r), [i], !0)
            );
        }
        return i;
      case types.regexp:
        var o = this.value;
        return (
          (t = this.parseLiteral(o.value)),
          (t.regex = { pattern: o.pattern, flags: o.flags }),
          t
        );
      case types.num:
      case types.string:
        return this.parseLiteral(this.value);
      case types._null:
      case types._true:
      case types._false:
        return (
          (t = this.startNode()),
          (t.value =
            this.type === types._null ? null : this.type === types._true),
          (t.raw = this.type.keyword),
          this.next(),
          this.finishNode(t, 'Literal')
        );
      case types.parenL:
        var p = this.start,
          c = this.parseParenAndDistinguishExpression(a);
        return (
          e &&
            (0 > e.parenthesizedAssign &&
              !this.isSimpleAssignTarget(c) &&
              (e.parenthesizedAssign = p),
            0 > e.parenthesizedBind && (e.parenthesizedBind = p)),
          c
        );
      case types.bracketL:
        return (
          (t = this.startNode()),
          this.next(),
          (t.elements = this.parseExprList(types.bracketR, !0, !0, e)),
          this.finishNode(t, 'ArrayExpression')
        );
      case types.braceL:
        return this.parseObj(!1, e);
      case types._function:
        return (t = this.startNode()), this.next(), this.parseFunction(t, 0);
      case types._class:
        return this.parseClass(this.startNode(), !1);
      case types._new:
        return this.parseNew();
      case types.backQuote:
        return this.parseTemplate();
      case types._import:
        return 11 <= this.options.ecmaVersion
          ? this.parseExprImport()
          : this.unexpected();
      default:
        this.unexpected();
    }
  }),
  (pp$3.parseExprImport = function () {
    var e = this.startNode();
    this.containsEsc &&
      this.raiseRecoverable(this.start, 'Escape sequence in keyword import');
    var t = this.parseIdent(!0);
    switch (this.type) {
      case types.parenL:
        return this.parseDynamicImport(e);
      case types.dot:
        return (e.meta = t), this.parseImportMeta(e);
      default:
        this.unexpected();
    }
  }),
  (pp$3.parseDynamicImport = function (e) {
    if (
      (this.next(),
      (e.source = this.parseMaybeAssign()),
      !this.eat(types.parenR))
    ) {
      var t = this.start;
      this.eat(types.comma) && this.eat(types.parenR)
        ? this.raiseRecoverable(t, 'Trailing comma is not allowed in import()')
        : this.unexpected(t);
    }
    return this.finishNode(e, 'ImportExpression');
  }),
  (pp$3.parseImportMeta = function (e) {
    this.next();
    var t = this.containsEsc;
    return (
      (e.property = this.parseIdent(!0)),
      'meta' !== e.property.name &&
        this.raiseRecoverable(
          e.property.start,
          "The only valid meta property for import is 'import.meta'",
        ),
      t &&
        this.raiseRecoverable(
          e.start,
          "'import.meta' must not contain escaped characters",
        ),
      'module' === this.options.sourceType ||
        this.options.allowImportExportEverywhere ||
        this.raiseRecoverable(
          e.start,
          "Cannot use 'import.meta' outside a module",
        ),
      this.finishNode(e, 'MetaProperty')
    );
  }),
  (pp$3.parseLiteral = function (e) {
    var t = this.startNode();
    return (
      (t.value = e),
      (t.raw = this.input.slice(this.start, this.end)),
      110 === t.raw.charCodeAt(t.raw.length - 1) &&
        (t.bigint = t.raw.slice(0, -1).replace(/_/g, '')),
      this.next(),
      this.finishNode(t, 'Literal')
    );
  }),
  (pp$3.parseParenExpression = function () {
    this.expect(types.parenL);
    var e = this.parseExpression();
    return this.expect(types.parenR), e;
  }),
  (pp$3.parseParenAndDistinguishExpression = function (e) {
    var t,
      a = this.start,
      n = this.startLoc,
      r = 8 <= this.options.ecmaVersion;
    if (6 <= this.options.ecmaVersion) {
      this.next();
      var s,
        i = this.start,
        o = this.startLoc,
        p = [],
        c = !0,
        l = !1,
        d = new DestructuringErrors(),
        u = this.yieldPos,
        m = this.awaitPos;
      for (this.yieldPos = 0, this.awaitPos = 0; this.type !== types.parenR; )
        if (
          (c ? (c = !1) : this.expect(types.comma),
          r && this.afterTrailingComma(types.parenR, !0))
        ) {
          l = !0;
          break;
        } else if (this.type === types.ellipsis) {
          (s = this.start),
            p.push(this.parseParenItem(this.parseRestBinding())),
            this.type === types.comma &&
              this.raise(
                this.start,
                'Comma is not permitted after the rest element',
              );
          break;
        } else p.push(this.parseMaybeAssign(!1, d, this.parseParenItem));
      var h = this.start,
        x = this.startLoc;
      if (
        (this.expect(types.parenR),
        e && !this.canInsertSemicolon() && this.eat(types.arrow))
      )
        return (
          this.checkPatternErrors(d, !1),
          this.checkYieldAwaitInDefaultParams(),
          (this.yieldPos = u),
          (this.awaitPos = m),
          this.parseParenArrowList(a, n, p)
        );
      (!p.length || l) && this.unexpected(this.lastTokStart),
        s && this.unexpected(s),
        this.checkExpressionErrors(d, !0),
        (this.yieldPos = u || this.yieldPos),
        (this.awaitPos = m || this.awaitPos),
        1 < p.length
          ? ((t = this.startNodeAt(i, o)),
            (t.expressions = p),
            this.finishNodeAt(t, 'SequenceExpression', h, x))
          : (t = p[0]);
    } else t = this.parseParenExpression();
    if (this.options.preserveParens) {
      var g = this.startNodeAt(a, n);
      return (g.expression = t), this.finishNode(g, 'ParenthesizedExpression');
    }
    return t;
  }),
  (pp$3.parseParenItem = function (e) {
    return e;
  }),
  (pp$3.parseParenArrowList = function (e, t, a) {
    return this.parseArrowExpression(this.startNodeAt(e, t), a);
  });
var empty$1 = [];
(pp$3.parseNew = function () {
  this.containsEsc &&
    this.raiseRecoverable(this.start, 'Escape sequence in keyword new');
  var e = this.startNode(),
    t = this.parseIdent(!0);
  if (6 <= this.options.ecmaVersion && this.eat(types.dot)) {
    e.meta = t;
    var a = this.containsEsc;
    return (
      (e.property = this.parseIdent(!0)),
      'target' !== e.property.name &&
        this.raiseRecoverable(
          e.property.start,
          "The only valid meta property for new is 'new.target'",
        ),
      a &&
        this.raiseRecoverable(
          e.start,
          "'new.target' must not contain escaped characters",
        ),
      this.inNonArrowFunction ||
        this.raiseRecoverable(
          e.start,
          "'new.target' can only be used in functions",
        ),
      this.finishNode(e, 'MetaProperty')
    );
  }
  var n = this.start,
    r = this.startLoc,
    s = this.type === types._import;
  return (
    (e.callee = this.parseSubscripts(this.parseExprAtom(), n, r, !0)),
    s &&
      'ImportExpression' === e.callee.type &&
      this.raise(n, 'Cannot use new with import()'),
    (e.arguments = this.eat(types.parenL)
      ? this.parseExprList(types.parenR, 8 <= this.options.ecmaVersion, !1)
      : empty$1),
    this.finishNode(e, 'NewExpression')
  );
}),
  (pp$3.parseTemplateElement = function (e) {
    var t = e.isTagged,
      a = this.startNode();
    return (
      this.type === types.invalidTemplate
        ? (!t &&
            this.raiseRecoverable(
              this.start,
              'Bad escape sequence in untagged template literal',
            ),
          (a.value = { raw: this.value, cooked: null }))
        : (a.value = {
            raw: this.input.slice(this.start, this.end).replace(/\r\n?/g, '\n'),
            cooked: this.value,
          }),
      this.next(),
      (a.tail = this.type === types.backQuote),
      this.finishNode(a, 'TemplateElement')
    );
  }),
  (pp$3.parseTemplate = function (e) {
    void 0 === e && (e = {});
    var t = e.isTagged;
    void 0 === t && (t = !1);
    var a = this.startNode();
    this.next(), (a.expressions = []);
    var n = this.parseTemplateElement({ isTagged: t });
    for (a.quasis = [n]; !n.tail; )
      this.type === types.eof &&
        this.raise(this.pos, 'Unterminated template literal'),
        this.expect(types.dollarBraceL),
        a.expressions.push(this.parseExpression()),
        this.expect(types.braceR),
        a.quasis.push((n = this.parseTemplateElement({ isTagged: t })));
    return this.next(), this.finishNode(a, 'TemplateLiteral');
  }),
  (pp$3.isAsyncProp = function (e) {
    return (
      !e.computed &&
      'Identifier' === e.key.type &&
      'async' === e.key.name &&
      (this.type === types.name ||
        this.type === types.num ||
        this.type === types.string ||
        this.type === types.bracketL ||
        this.type.keyword ||
        (9 <= this.options.ecmaVersion && this.type === types.star)) &&
      !lineBreak.test(this.input.slice(this.lastTokEnd, this.start))
    );
  }),
  (pp$3.parseObj = function (e, t) {
    var a = this.startNode(),
      n = !0,
      r = {};
    for (a.properties = [], this.next(); !this.eat(types.braceR); ) {
      if (!!n) n = !1;
      else if (
        (this.expect(types.comma),
        5 <= this.options.ecmaVersion && this.afterTrailingComma(types.braceR))
      )
        break;
      var s = this.parseProperty(e, t);
      e || this.checkPropClash(s, r, t), a.properties.push(s);
    }
    return this.finishNode(a, e ? 'ObjectPattern' : 'ObjectExpression');
  }),
  (pp$3.parseProperty = function (e, t) {
    var a,
      n,
      r,
      s,
      i = this.startNode();
    if (9 <= this.options.ecmaVersion && this.eat(types.ellipsis))
      return e
        ? ((i.argument = this.parseIdent(!1)),
          this.type === types.comma &&
            this.raise(
              this.start,
              'Comma is not permitted after the rest element',
            ),
          this.finishNode(i, 'RestElement'))
        : (this.type === types.parenL &&
            t &&
            (0 > t.parenthesizedAssign && (t.parenthesizedAssign = this.start),
            0 > t.parenthesizedBind && (t.parenthesizedBind = this.start)),
          (i.argument = this.parseMaybeAssign(!1, t)),
          this.type === types.comma &&
            t &&
            0 > t.trailingComma &&
            (t.trailingComma = this.start),
          this.finishNode(i, 'SpreadElement'));
    6 <= this.options.ecmaVersion &&
      ((i.method = !1),
      (i.shorthand = !1),
      (e || t) && ((r = this.start), (s = this.startLoc)),
      !e && (a = this.eat(types.star)));
    var o = this.containsEsc;
    return (
      this.parsePropertyName(i),
      e || o || !(8 <= this.options.ecmaVersion) || a || !this.isAsyncProp(i)
        ? (n = !1)
        : ((n = !0),
          (a = 9 <= this.options.ecmaVersion && this.eat(types.star)),
          this.parsePropertyName(i, t)),
      this.parsePropertyValue(i, e, a, n, r, s, t, o),
      this.finishNode(i, 'Property')
    );
  }),
  (pp$3.parsePropertyValue = function (e, t, a, n, r, s, i, o) {
    if (
      ((a || n) && this.type === types.colon && this.unexpected(),
      this.eat(types.colon))
    )
      (e.value = t
        ? this.parseMaybeDefault(this.start, this.startLoc)
        : this.parseMaybeAssign(!1, i)),
        (e.kind = 'init');
    else if (6 <= this.options.ecmaVersion && this.type === types.parenL)
      t && this.unexpected(),
        (e.kind = 'init'),
        (e.method = !0),
        (e.value = this.parseMethod(a, n));
    else if (
      !t &&
      !o &&
      5 <= this.options.ecmaVersion &&
      !e.computed &&
      'Identifier' === e.key.type &&
      ('get' === e.key.name || 'set' === e.key.name) &&
      this.type !== types.comma &&
      this.type !== types.braceR &&
      this.type !== types.eq
    ) {
      (a || n) && this.unexpected(),
        (e.kind = e.key.name),
        this.parsePropertyName(e),
        (e.value = this.parseMethod(!1));
      var p = 'get' === e.kind ? 0 : 1;
      if (e.value.params.length !== p) {
        var c = e.value.start;
        'get' === e.kind
          ? this.raiseRecoverable(c, 'getter should have no params')
          : this.raiseRecoverable(c, 'setter should have exactly one param');
      } else
        'set' === e.kind &&
          'RestElement' === e.value.params[0].type &&
          this.raiseRecoverable(
            e.value.params[0].start,
            'Setter cannot use rest params',
          );
    } else
      6 <= this.options.ecmaVersion &&
      !e.computed &&
      'Identifier' === e.key.type
        ? ((a || n) && this.unexpected(),
          this.checkUnreserved(e.key),
          'await' !== e.key.name ||
            this.awaitIdentPos ||
            (this.awaitIdentPos = r),
          (e.kind = 'init'),
          t
            ? (e.value = this.parseMaybeDefault(r, s, this.copyNode(e.key)))
            : this.type === types.eq && i
            ? (0 > i.shorthandAssign && (i.shorthandAssign = this.start),
              (e.value = this.parseMaybeDefault(r, s, this.copyNode(e.key))))
            : (e.value = this.copyNode(e.key)),
          (e.shorthand = !0))
        : this.unexpected();
  }),
  (pp$3.parsePropertyName = function (e) {
    if (6 <= this.options.ecmaVersion) {
      if (this.eat(types.bracketL))
        return (
          (e.computed = !0),
          (e.key = this.parseMaybeAssign()),
          this.expect(types.bracketR),
          e.key
        );
      e.computed = !1;
    }
    return (e.key =
      this.type === types.num || this.type === types.string
        ? this.parseExprAtom()
        : this.parseIdent('never' !== this.options.allowReserved));
  }),
  (pp$3.initFunction = function (e) {
    (e.id = null),
      6 <= this.options.ecmaVersion && (e.generator = e.expression = !1),
      8 <= this.options.ecmaVersion && (e.async = !1);
  }),
  (pp$3.parseMethod = function (e, t, a) {
    var n = this.startNode(),
      r = this.yieldPos,
      s = this.awaitPos,
      i = this.awaitIdentPos;
    return (
      this.initFunction(n),
      6 <= this.options.ecmaVersion && (n.generator = e),
      8 <= this.options.ecmaVersion && (n.async = !!t),
      (this.yieldPos = 0),
      (this.awaitPos = 0),
      (this.awaitIdentPos = 0),
      this.enterScope(
        functionFlags(t, n.generator) |
          SCOPE_SUPER |
          (a ? SCOPE_DIRECT_SUPER : 0),
      ),
      this.expect(types.parenL),
      (n.params = this.parseBindingList(
        types.parenR,
        !1,
        8 <= this.options.ecmaVersion,
      )),
      this.checkYieldAwaitInDefaultParams(),
      this.parseFunctionBody(n, !1, !0),
      (this.yieldPos = r),
      (this.awaitPos = s),
      (this.awaitIdentPos = i),
      this.finishNode(n, 'FunctionExpression')
    );
  }),
  (pp$3.parseArrowExpression = function (e, t, a) {
    var n = this.yieldPos,
      r = this.awaitPos,
      s = this.awaitIdentPos;
    return (
      this.enterScope(functionFlags(a, !1) | SCOPE_ARROW),
      this.initFunction(e),
      8 <= this.options.ecmaVersion && (e.async = !!a),
      (this.yieldPos = 0),
      (this.awaitPos = 0),
      (this.awaitIdentPos = 0),
      (e.params = this.toAssignableList(t, !0)),
      this.parseFunctionBody(e, !0, !1),
      (this.yieldPos = n),
      (this.awaitPos = r),
      (this.awaitIdentPos = s),
      this.finishNode(e, 'ArrowFunctionExpression')
    );
  }),
  (pp$3.parseFunctionBody = function (e, t, a) {
    var n = t && this.type !== types.braceL,
      r = this.strict,
      s = !1;
    if (n)
      (e.body = this.parseMaybeAssign()),
        (e.expression = !0),
        this.checkParams(e, !1);
    else {
      var i =
        7 <= this.options.ecmaVersion && !this.isSimpleParamList(e.params);
      (!r || i) &&
        ((s = this.strictDirective(this.end)),
        s &&
          i &&
          this.raiseRecoverable(
            e.start,
            "Illegal 'use strict' directive in function with non-simple parameter list",
          ));
      var o = this.labels;
      (this.labels = []),
        s && (this.strict = !0),
        this.checkParams(
          e,
          !r && !s && !t && !a && this.isSimpleParamList(e.params),
        ),
        this.strict && e.id && this.checkLValSimple(e.id, BIND_OUTSIDE),
        (e.body = this.parseBlock(!1, void 0, s && !r)),
        (e.expression = !1),
        this.adaptDirectivePrologue(e.body.body),
        (this.labels = o);
    }
    this.exitScope();
  }),
  (pp$3.isSimpleParamList = function (e) {
    for (var t, a = 0, n = e; a < n.length; a += 1)
      if (((t = n[a]), 'Identifier' !== t.type)) return !1;
    return !0;
  }),
  (pp$3.checkParams = function (e, t) {
    for (
      var a, n = Object.create(null), r = 0, s = e.params;
      r < s.length;
      r += 1
    )
      (a = s[r]), this.checkLValInnerPattern(a, BIND_VAR, t ? null : n);
  }),
  (pp$3.parseExprList = function (e, t, a, n) {
    for (var r = [], s = !0; !this.eat(e); ) {
      if (!!s) s = !1;
      else if ((this.expect(types.comma), t && this.afterTrailingComma(e)))
        break;
      var i = void 0;
      a && this.type === types.comma
        ? (i = null)
        : this.type === types.ellipsis
        ? ((i = this.parseSpread(n)),
          n &&
            this.type === types.comma &&
            0 > n.trailingComma &&
            (n.trailingComma = this.start))
        : (i = this.parseMaybeAssign(!1, n)),
        r.push(i);
    }
    return r;
  }),
  (pp$3.checkUnreserved = function (e) {
    var t = e.start,
      a = e.end,
      n = e.name;
    if (
      (this.inGenerator &&
        'yield' === n &&
        this.raiseRecoverable(
          t,
          "Cannot use 'yield' as identifier inside a generator",
        ),
      this.inAsync &&
        'await' === n &&
        this.raiseRecoverable(
          t,
          "Cannot use 'await' as identifier inside an async function",
        ),
      this.currentThisScope().inClassFieldInit &&
        'arguments' === n &&
        this.raiseRecoverable(
          t,
          "Cannot use 'arguments' in class field initializer",
        ),
      this.keywords.test(n) && this.raise(t, "Unexpected keyword '" + n + "'"),
      !(
        6 > this.options.ecmaVersion &&
        -1 !== this.input.slice(t, a).indexOf('\\')
      ))
    ) {
      var r = this.strict ? this.reservedWordsStrict : this.reservedWords;
      r.test(n) &&
        (!this.inAsync &&
          'await' === n &&
          this.raiseRecoverable(
            t,
            "Cannot use keyword 'await' outside an async function",
          ),
        this.raiseRecoverable(t, "The keyword '" + n + "' is reserved"));
    }
  }),
  (pp$3.parseIdent = function (e) {
    var t = this.startNode();
    return (
      this.type === types.name
        ? (t.name = this.value)
        : this.type.keyword
        ? ((t.name = this.type.keyword),
          ('class' === t.name || 'function' === t.name) &&
            (this.lastTokEnd !== this.lastTokStart + 1 ||
              46 !== this.input.charCodeAt(this.lastTokStart)) &&
            this.context.pop())
        : this.unexpected(),
      this.next(!!e),
      this.finishNode(t, 'Identifier'),
      e ||
        (this.checkUnreserved(t),
        'await' === t.name &&
          !this.awaitIdentPos &&
          (this.awaitIdentPos = t.start)),
      t
    );
  }),
  (pp$3.parsePrivateIdent = function () {
    var e = this.startNode();
    return (
      this.type === types.privateId ? (e.name = this.value) : this.unexpected(),
      this.next(),
      this.finishNode(e, 'PrivateIdentifier'),
      0 === this.privateNameStack.length
        ? this.raise(
            e.start,
            "Private field '#" +
              e.name +
              "' must be declared in an enclosing class",
          )
        : this.privateNameStack[this.privateNameStack.length - 1].used.push(e),
      e
    );
  }),
  (pp$3.parseYield = function (e) {
    this.yieldPos || (this.yieldPos = this.start);
    var t = this.startNode();
    return (
      this.next(),
      this.type === types.semi ||
      this.canInsertSemicolon() ||
      (this.type !== types.star && !this.type.startsExpr)
        ? ((t.delegate = !1), (t.argument = null))
        : ((t.delegate = this.eat(types.star)),
          (t.argument = this.parseMaybeAssign(e))),
      this.finishNode(t, 'YieldExpression')
    );
  }),
  (pp$3.parseAwait = function () {
    this.awaitPos || (this.awaitPos = this.start);
    var e = this.startNode();
    return (
      this.next(),
      (e.argument = this.parseMaybeUnary(null, !0)),
      this.finishNode(e, 'AwaitExpression')
    );
  });
var pp$4 = Parser.prototype;
(pp$4.raise = function (e, t) {
  var a = getLineInfo(this.input, e);
  t += ' (' + a.line + ':' + a.column + ')';
  var n = new SyntaxError(t);
  throw ((n.pos = e), (n.loc = a), (n.raisedAt = this.pos), n);
}),
  (pp$4.raiseRecoverable = pp$4.raise),
  (pp$4.curPosition = function () {
    if (this.options.locations)
      return new Position(this.curLine, this.pos - this.lineStart);
  });
var pp$5 = Parser.prototype,
  Scope = function (e) {
    (this.flags = e),
      (this.var = []),
      (this.lexical = []),
      (this.functions = []),
      (this.inClassFieldInit = !1);
  };
(pp$5.enterScope = function (e) {
  this.scopeStack.push(new Scope(e));
}),
  (pp$5.exitScope = function () {
    this.scopeStack.pop();
  }),
  (pp$5.treatFunctionsAsVarInScope = function (e) {
    return e.flags & SCOPE_FUNCTION || (!this.inModule && e.flags & SCOPE_TOP);
  }),
  (pp$5.declareName = function (e, t, a) {
    var n = !1;
    if (t === BIND_LEXICAL) {
      var r = this.currentScope();
      (n =
        -1 < r.lexical.indexOf(e) ||
        -1 < r.functions.indexOf(e) ||
        -1 < r.var.indexOf(e)),
        r.lexical.push(e),
        this.inModule && r.flags & SCOPE_TOP && delete this.undefinedExports[e];
    } else if (t === BIND_SIMPLE_CATCH) {
      var s = this.currentScope();
      s.lexical.push(e);
    } else if (t === BIND_FUNCTION) {
      var o = this.currentScope();
      (n = this.treatFunctionsAsVar
        ? -1 < o.lexical.indexOf(e)
        : -1 < o.lexical.indexOf(e) || -1 < o.var.indexOf(e)),
        o.functions.push(e);
    } else
      for (var p, c = this.scopeStack.length - 1; 0 <= c; --c) {
        if (
          ((p = this.scopeStack[c]),
          (-1 < p.lexical.indexOf(e) &&
            !(p.flags & SCOPE_SIMPLE_CATCH && p.lexical[0] === e)) ||
            (!this.treatFunctionsAsVarInScope(p) &&
              -1 < p.functions.indexOf(e)))
        ) {
          n = !0;
          break;
        }
        if (
          (p.var.push(e),
          this.inModule &&
            p.flags & SCOPE_TOP &&
            delete this.undefinedExports[e],
          p.flags & SCOPE_VAR)
        )
          break;
      }
    n &&
      this.raiseRecoverable(
        a,
        "Identifier '" + e + "' has already been declared",
      );
  }),
  (pp$5.checkLocalExport = function (e) {
    -1 === this.scopeStack[0].lexical.indexOf(e.name) &&
      -1 === this.scopeStack[0].var.indexOf(e.name) &&
      (this.undefinedExports[e.name] = e);
  }),
  (pp$5.currentScope = function () {
    return this.scopeStack[this.scopeStack.length - 1];
  }),
  (pp$5.currentVarScope = function () {
    for (var e, t = this.scopeStack.length - 1; ; t--)
      if (((e = this.scopeStack[t]), e.flags & SCOPE_VAR)) return e;
  }),
  (pp$5.currentThisScope = function () {
    for (var e, t = this.scopeStack.length - 1; ; t--)
      if (
        ((e = this.scopeStack[t]),
        e.flags & SCOPE_VAR && !(e.flags & SCOPE_ARROW))
      )
        return e;
  });
var Node = function (e, t, a) {
    (this.type = ''),
      (this.start = t),
      (this.end = 0),
      e.options.locations && (this.loc = new SourceLocation(e, a)),
      e.options.directSourceFile &&
        (this.sourceFile = e.options.directSourceFile),
      e.options.ranges && (this.range = [t, 0]);
  },
  pp$6 = Parser.prototype;
(pp$6.startNode = function () {
  return new Node(this, this.start, this.startLoc);
}),
  (pp$6.startNodeAt = function (e, t) {
    return new Node(this, e, t);
  });
function finishNodeAt(e, t, a, n) {
  return (
    (e.type = t),
    (e.end = a),
    this.options.locations && (e.loc.end = n),
    this.options.ranges && (e.range[1] = a),
    e
  );
}
(pp$6.finishNode = function (e, t) {
  return finishNodeAt.call(this, e, t, this.lastTokEnd, this.lastTokEndLoc);
}),
  (pp$6.finishNodeAt = function (e, t, a, n) {
    return finishNodeAt.call(this, e, t, a, n);
  }),
  (pp$6.copyNode = function (e) {
    var t = new Node(this, e.start, this.startLoc);
    for (var a in e) t[a] = e[a];
    return t;
  });
var TokContext = function (e, t, a, n, r) {
    (this.token = e),
      (this.isExpr = !!t),
      (this.preserveSpace = !!a),
      (this.override = n),
      (this.generator = !!r);
  },
  types$1 = {
    b_stat: new TokContext('{', !1),
    b_expr: new TokContext('{', !0),
    b_tmpl: new TokContext('${', !1),
    p_stat: new TokContext('(', !1),
    p_expr: new TokContext('(', !0),
    q_tmpl: new TokContext('`', !0, !0, function (e) {
      return e.tryReadTemplateToken();
    }),
    f_stat: new TokContext('function', !1),
    f_expr: new TokContext('function', !0),
    f_expr_gen: new TokContext('function', !0, !1, null, !0),
    f_gen: new TokContext('function', !1, !1, null, !0),
  },
  pp$7 = Parser.prototype;
(pp$7.initialContext = function () {
  return [types$1.b_stat];
}),
  (pp$7.braceIsBlock = function (e) {
    var t = this.curContext();
    return (
      !(t !== types$1.f_expr && t !== types$1.f_stat) ||
      (e === types.colon && (t === types$1.b_stat || t === types$1.b_expr)
        ? !t.isExpr
        : e === types._return || (e === types.name && this.exprAllowed)
        ? lineBreak.test(this.input.slice(this.lastTokEnd, this.start))
        : !(
            e !== types._else &&
            e !== types.semi &&
            e !== types.eof &&
            e !== types.parenR &&
            e !== types.arrow
          ) ||
          (e === types.braceL
            ? t === types$1.b_stat
            : e !== types._var &&
              e !== types._const &&
              e !== types.name &&
              !this.exprAllowed))
    );
  }),
  (pp$7.inGeneratorContext = function () {
    for (var e, t = this.context.length - 1; 1 <= t; t--)
      if (((e = this.context[t]), 'function' === e.token)) return e.generator;
    return !1;
  }),
  (pp$7.updateContext = function (e) {
    var t,
      a = this.type;
    a.keyword && e === types.dot
      ? (this.exprAllowed = !1)
      : (t = a.updateContext)
      ? t.call(this, e)
      : (this.exprAllowed = a.beforeExpr);
  }),
  (types.parenR.updateContext = types.braceR.updateContext =
    function () {
      if (1 === this.context.length) return void (this.exprAllowed = !0);
      var e = this.context.pop();
      e === types$1.b_stat &&
        'function' === this.curContext().token &&
        (e = this.context.pop()),
        (this.exprAllowed = !e.isExpr);
    }),
  (types.braceL.updateContext = function (e) {
    this.context.push(this.braceIsBlock(e) ? types$1.b_stat : types$1.b_expr),
      (this.exprAllowed = !0);
  }),
  (types.dollarBraceL.updateContext = function () {
    this.context.push(types$1.b_tmpl), (this.exprAllowed = !0);
  }),
  (types.parenL.updateContext = function (e) {
    var t =
      e === types._if ||
      e === types._for ||
      e === types._with ||
      e === types._while;
    this.context.push(t ? types$1.p_stat : types$1.p_expr),
      (this.exprAllowed = !0);
  }),
  (types.incDec.updateContext = function () {}),
  (types._function.updateContext = types._class.updateContext =
    function (e) {
      !e.beforeExpr ||
      e === types._else ||
      (e === types.semi && this.curContext() !== types$1.p_stat) ||
      (e === types._return &&
        lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) ||
      ((e === types.colon || e === types.braceL) &&
        this.curContext() === types$1.b_stat)
        ? this.context.push(types$1.f_stat)
        : this.context.push(types$1.f_expr),
        (this.exprAllowed = !1);
    }),
  (types.backQuote.updateContext = function () {
    this.curContext() === types$1.q_tmpl
      ? this.context.pop()
      : this.context.push(types$1.q_tmpl),
      (this.exprAllowed = !1);
  }),
  (types.star.updateContext = function (e) {
    if (e === types._function) {
      var t = this.context.length - 1;
      this.context[t] =
        this.context[t] === types$1.f_expr ? types$1.f_expr_gen : types$1.f_gen;
    }
    this.exprAllowed = !0;
  }),
  (types.name.updateContext = function (e) {
    var t = !1;
    6 <= this.options.ecmaVersion &&
      e !== types.dot &&
      (('of' === this.value && !this.exprAllowed) ||
        ('yield' === this.value && this.inGeneratorContext())) &&
      (t = !0),
      (this.exprAllowed = t);
  });
var ecma9BinaryProperties =
    'ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS',
  ecma10BinaryProperties =
    'ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS Extended_Pictographic',
  ecma11BinaryProperties = ecma10BinaryProperties,
  ecma12BinaryProperties =
    ecma11BinaryProperties + ' EBase EComp EMod EPres ExtPict',
  unicodeBinaryProperties = {
    9: 'ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS',
    10: ecma10BinaryProperties,
    11: ecma11BinaryProperties,
    12: ecma12BinaryProperties,
  },
  unicodeGeneralCategoryValues =
    'Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu',
  ecma9ScriptValues =
    'Adlam Adlm Ahom Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb',
  ecma10ScriptValues =
    ecma9ScriptValues +
    ' Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd',
  ecma11ScriptValues =
    ecma10ScriptValues +
    ' Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho',
  ecma12ScriptValues =
    ecma11ScriptValues +
    ' Chorasmian Chrs Diak Dives_Akuru Khitan_Small_Script Kits Yezi Yezidi',
  unicodeScriptValues = {
    9: ecma9ScriptValues,
    10: ecma10ScriptValues,
    11: ecma11ScriptValues,
    12: ecma12ScriptValues,
  },
  data = {};
function buildUnicodeData(e) {
  var t = (data[e] = {
    binary: wordsRegexp(
      unicodeBinaryProperties[e] + ' ' + unicodeGeneralCategoryValues,
    ),
    nonBinary: {
      General_Category: wordsRegexp(unicodeGeneralCategoryValues),
      Script: wordsRegexp(unicodeScriptValues[e]),
    },
  });
  (t.nonBinary.Script_Extensions = t.nonBinary.Script),
    (t.nonBinary.gc = t.nonBinary.General_Category),
    (t.nonBinary.sc = t.nonBinary.Script),
    (t.nonBinary.scx = t.nonBinary.Script_Extensions);
}
buildUnicodeData(9),
  buildUnicodeData(10),
  buildUnicodeData(11),
  buildUnicodeData(12);
var pp$8 = Parser.prototype,
  RegExpValidationState = function (e) {
    (this.parser = e),
      (this.validFlags =
        'gim' +
        (6 <= e.options.ecmaVersion ? 'uy' : '') +
        (9 <= e.options.ecmaVersion ? 's' : '') +
        (13 <= e.options.ecmaVersion ? 'd' : '')),
      (this.unicodeProperties =
        data[12 <= e.options.ecmaVersion ? 12 : e.options.ecmaVersion]),
      (this.source = ''),
      (this.flags = ''),
      (this.start = 0),
      (this.switchU = !1),
      (this.switchN = !1),
      (this.pos = 0),
      (this.lastIntValue = 0),
      (this.lastStringValue = ''),
      (this.lastAssertionIsQuantifiable = !1),
      (this.numCapturingParens = 0),
      (this.maxBackReference = 0),
      (this.groupNames = []),
      (this.backReferenceNames = []);
  };
(RegExpValidationState.prototype.reset = function (e, t, a) {
  var n = -1 !== a.indexOf('u');
  (this.start = 0 | e),
    (this.source = t + ''),
    (this.flags = a),
    (this.switchU = n && 6 <= this.parser.options.ecmaVersion),
    (this.switchN = n && 9 <= this.parser.options.ecmaVersion);
}),
  (RegExpValidationState.prototype.raise = function (e) {
    this.parser.raiseRecoverable(
      this.start,
      'Invalid regular expression: /' + this.source + '/: ' + e,
    );
  }),
  (RegExpValidationState.prototype.at = function (e, t) {
    void 0 === t && (t = !1);
    var a = this.source,
      n = a.length;
    if (e >= n) return -1;
    var r = a.charCodeAt(e);
    if (!(t || this.switchU) || 55295 >= r || 57344 <= r || e + 1 >= n)
      return r;
    var s = a.charCodeAt(e + 1);
    return 56320 <= s && 57343 >= s ? (r << 10) + s - 56613888 : r;
  }),
  (RegExpValidationState.prototype.nextIndex = function (e, t) {
    void 0 === t && (t = !1);
    var a = this.source,
      n = a.length;
    if (e >= n) return n;
    var r,
      s = a.charCodeAt(e);
    return !(t || this.switchU) ||
      55295 >= s ||
      57344 <= s ||
      e + 1 >= n ||
      56320 > (r = a.charCodeAt(e + 1)) ||
      57343 < r
      ? e + 1
      : e + 2;
  }),
  (RegExpValidationState.prototype.current = function (e) {
    return void 0 === e && (e = !1), this.at(this.pos, e);
  }),
  (RegExpValidationState.prototype.lookahead = function (e) {
    return void 0 === e && (e = !1), this.at(this.nextIndex(this.pos, e), e);
  }),
  (RegExpValidationState.prototype.advance = function (e) {
    void 0 === e && (e = !1), (this.pos = this.nextIndex(this.pos, e));
  }),
  (RegExpValidationState.prototype.eat = function (e, t) {
    return (
      void 0 === t && (t = !1), this.current(t) === e && (this.advance(t), !0)
    );
  });
function codePointToString(e) {
  return 65535 >= e
    ? String.fromCharCode(e)
    : ((e -= 65536),
      String.fromCharCode((e >> 10) + 55296, (1023 & e) + 56320));
}
(pp$8.validateRegExpFlags = function (e) {
  for (var t, a = e.validFlags, n = e.flags, r = 0; r < n.length; r++)
    (t = n.charAt(r)),
      -1 === a.indexOf(t) &&
        this.raise(e.start, 'Invalid regular expression flag'),
      -1 < n.indexOf(t, r + 1) &&
        this.raise(e.start, 'Duplicate regular expression flag');
}),
  (pp$8.validateRegExpPattern = function (e) {
    this.regexp_pattern(e),
      !e.switchN &&
        9 <= this.options.ecmaVersion &&
        0 < e.groupNames.length &&
        ((e.switchN = !0), this.regexp_pattern(e));
  }),
  (pp$8.regexp_pattern = function (e) {
    (e.pos = 0),
      (e.lastIntValue = 0),
      (e.lastStringValue = ''),
      (e.lastAssertionIsQuantifiable = !1),
      (e.numCapturingParens = 0),
      (e.maxBackReference = 0),
      (e.groupNames.length = 0),
      (e.backReferenceNames.length = 0),
      this.regexp_disjunction(e),
      e.pos !== e.source.length &&
        (e.eat(41) && e.raise("Unmatched ')'"),
        (e.eat(93) || e.eat(125)) && e.raise('Lone quantifier brackets')),
      e.maxBackReference > e.numCapturingParens && e.raise('Invalid escape');
    for (var t, a = 0, n = e.backReferenceNames; a < n.length; a += 1)
      (t = n[a]),
        -1 === e.groupNames.indexOf(t) &&
          e.raise('Invalid named capture referenced');
  }),
  (pp$8.regexp_disjunction = function (e) {
    for (this.regexp_alternative(e); e.eat(124); ) this.regexp_alternative(e);
    this.regexp_eatQuantifier(e, !0) && e.raise('Nothing to repeat'),
      e.eat(123) && e.raise('Lone quantifier brackets');
  }),
  (pp$8.regexp_alternative = function (e) {
    for (; e.pos < e.source.length && this.regexp_eatTerm(e); );
  }),
  (pp$8.regexp_eatTerm = function (e) {
    return this.regexp_eatAssertion(e)
      ? (e.lastAssertionIsQuantifiable &&
          this.regexp_eatQuantifier(e) &&
          e.switchU &&
          e.raise('Invalid quantifier'),
        !0)
      : !(e.switchU
          ? !this.regexp_eatAtom(e)
          : !this.regexp_eatExtendedAtom(e)) &&
          (this.regexp_eatQuantifier(e), !0);
  }),
  (pp$8.regexp_eatAssertion = function (e) {
    var t = e.pos;
    if (((e.lastAssertionIsQuantifiable = !1), e.eat(94) || e.eat(36)))
      return !0;
    if (e.eat(92)) {
      if (e.eat(66) || e.eat(98)) return !0;
      e.pos = t;
    }
    if (e.eat(40) && e.eat(63)) {
      var a = !1;
      if (
        (9 <= this.options.ecmaVersion && (a = e.eat(60)),
        e.eat(61) || e.eat(33))
      )
        return (
          this.regexp_disjunction(e),
          e.eat(41) || e.raise('Unterminated group'),
          (e.lastAssertionIsQuantifiable = !a),
          !0
        );
    }
    return (e.pos = t), !1;
  }),
  (pp$8.regexp_eatQuantifier = function (e, t) {
    return (
      void 0 === t && (t = !1),
      !!this.regexp_eatQuantifierPrefix(e, t) && (e.eat(63), !0)
    );
  }),
  (pp$8.regexp_eatQuantifierPrefix = function (e, t) {
    return (
      e.eat(42) ||
      e.eat(43) ||
      e.eat(63) ||
      this.regexp_eatBracedQuantifier(e, t)
    );
  }),
  (pp$8.regexp_eatBracedQuantifier = function (e, t) {
    var a = e.pos;
    if (e.eat(123)) {
      var n = 0,
        r = -1;
      if (
        this.regexp_eatDecimalDigits(e) &&
        ((n = e.lastIntValue),
        e.eat(44) && this.regexp_eatDecimalDigits(e) && (r = e.lastIntValue),
        e.eat(125))
      )
        return (
          -1 !== r &&
            r < n &&
            !t &&
            e.raise('numbers out of order in {} quantifier'),
          !0
        );
      e.switchU && !t && e.raise('Incomplete quantifier'), (e.pos = a);
    }
    return !1;
  }),
  (pp$8.regexp_eatAtom = function (e) {
    return (
      this.regexp_eatPatternCharacters(e) ||
      e.eat(46) ||
      this.regexp_eatReverseSolidusAtomEscape(e) ||
      this.regexp_eatCharacterClass(e) ||
      this.regexp_eatUncapturingGroup(e) ||
      this.regexp_eatCapturingGroup(e)
    );
  }),
  (pp$8.regexp_eatReverseSolidusAtomEscape = function (e) {
    var t = e.pos;
    if (e.eat(92)) {
      if (this.regexp_eatAtomEscape(e)) return !0;
      e.pos = t;
    }
    return !1;
  }),
  (pp$8.regexp_eatUncapturingGroup = function (e) {
    var t = e.pos;
    if (e.eat(40)) {
      if (e.eat(63) && e.eat(58)) {
        if ((this.regexp_disjunction(e), e.eat(41))) return !0;
        e.raise('Unterminated group');
      }
      e.pos = t;
    }
    return !1;
  }),
  (pp$8.regexp_eatCapturingGroup = function (e) {
    if (e.eat(40)) {
      if (
        (9 <= this.options.ecmaVersion
          ? this.regexp_groupSpecifier(e)
          : 63 === e.current() && e.raise('Invalid group'),
        this.regexp_disjunction(e),
        e.eat(41))
      )
        return (e.numCapturingParens += 1), !0;
      e.raise('Unterminated group');
    }
    return !1;
  }),
  (pp$8.regexp_eatExtendedAtom = function (e) {
    return (
      e.eat(46) ||
      this.regexp_eatReverseSolidusAtomEscape(e) ||
      this.regexp_eatCharacterClass(e) ||
      this.regexp_eatUncapturingGroup(e) ||
      this.regexp_eatCapturingGroup(e) ||
      this.regexp_eatInvalidBracedQuantifier(e) ||
      this.regexp_eatExtendedPatternCharacter(e)
    );
  }),
  (pp$8.regexp_eatInvalidBracedQuantifier = function (e) {
    return (
      this.regexp_eatBracedQuantifier(e, !0) && e.raise('Nothing to repeat'), !1
    );
  }),
  (pp$8.regexp_eatSyntaxCharacter = function (e) {
    var t = e.current();
    return !!isSyntaxCharacter(t) && ((e.lastIntValue = t), e.advance(), !0);
  });
function isSyntaxCharacter(e) {
  return (
    36 === e ||
    (40 <= e && 43 >= e) ||
    46 === e ||
    63 === e ||
    (91 <= e && 94 >= e) ||
    (123 <= e && 125 >= e)
  );
}
(pp$8.regexp_eatPatternCharacters = function (e) {
  for (
    var t = e.pos, a = 0;
    -1 !== (a = e.current()) && !isSyntaxCharacter(a);

  )
    e.advance();
  return e.pos !== t;
}),
  (pp$8.regexp_eatExtendedPatternCharacter = function (e) {
    var t = e.current();
    return (
      !(
        -1 === t ||
        36 === t ||
        (40 <= t && 43 >= t) ||
        46 === t ||
        63 === t ||
        91 === t ||
        94 === t ||
        124 === t
      ) && (e.advance(), !0)
    );
  }),
  (pp$8.regexp_groupSpecifier = function (e) {
    if (e.eat(63)) {
      if (this.regexp_eatGroupName(e))
        return (
          -1 !== e.groupNames.indexOf(e.lastStringValue) &&
            e.raise('Duplicate capture group name'),
          void e.groupNames.push(e.lastStringValue)
        );
      e.raise('Invalid group');
    }
  }),
  (pp$8.regexp_eatGroupName = function (e) {
    if (((e.lastStringValue = ''), e.eat(60))) {
      if (this.regexp_eatRegExpIdentifierName(e) && e.eat(62)) return !0;
      e.raise('Invalid capture group name');
    }
    return !1;
  }),
  (pp$8.regexp_eatRegExpIdentifierName = function (e) {
    if (((e.lastStringValue = ''), this.regexp_eatRegExpIdentifierStart(e))) {
      for (
        e.lastStringValue += codePointToString(e.lastIntValue);
        this.regexp_eatRegExpIdentifierPart(e);

      )
        e.lastStringValue += codePointToString(e.lastIntValue);
      return !0;
    }
    return !1;
  }),
  (pp$8.regexp_eatRegExpIdentifierStart = function (e) {
    var t = e.pos,
      a = 11 <= this.options.ecmaVersion,
      n = e.current(a);
    return (e.advance(a),
    92 === n &&
      this.regexp_eatRegExpUnicodeEscapeSequence(e, a) &&
      (n = e.lastIntValue),
    isRegExpIdentifierStart(n))
      ? ((e.lastIntValue = n), !0)
      : ((e.pos = t), !1);
  });
function isRegExpIdentifierStart(e) {
  return isIdentifierStart(e, !0) || 36 === e || 95 === e;
}
pp$8.regexp_eatRegExpIdentifierPart = function (e) {
  var t = e.pos,
    a = 11 <= this.options.ecmaVersion,
    n = e.current(a);
  return (e.advance(a),
  92 === n &&
    this.regexp_eatRegExpUnicodeEscapeSequence(e, a) &&
    (n = e.lastIntValue),
  isRegExpIdentifierPart(n))
    ? ((e.lastIntValue = n), !0)
    : ((e.pos = t), !1);
};
function isRegExpIdentifierPart(e) {
  return (
    isIdentifierChar(e, !0) || 36 === e || 95 === e || 8204 === e || 8205 === e
  );
}
(pp$8.regexp_eatAtomEscape = function (e) {
  return (
    !!(
      this.regexp_eatBackReference(e) ||
      this.regexp_eatCharacterClassEscape(e) ||
      this.regexp_eatCharacterEscape(e) ||
      (e.switchN && this.regexp_eatKGroupName(e))
    ) ||
    (e.switchU &&
      (99 === e.current() && e.raise('Invalid unicode escape'),
      e.raise('Invalid escape')),
    !1)
  );
}),
  (pp$8.regexp_eatBackReference = function (e) {
    var t = e.pos;
    if (this.regexp_eatDecimalEscape(e)) {
      var a = e.lastIntValue;
      if (e.switchU)
        return a > e.maxBackReference && (e.maxBackReference = a), !0;
      if (a <= e.numCapturingParens) return !0;
      e.pos = t;
    }
    return !1;
  }),
  (pp$8.regexp_eatKGroupName = function (e) {
    if (e.eat(107)) {
      if (this.regexp_eatGroupName(e))
        return e.backReferenceNames.push(e.lastStringValue), !0;
      e.raise('Invalid named reference');
    }
    return !1;
  }),
  (pp$8.regexp_eatCharacterEscape = function (e) {
    return (
      this.regexp_eatControlEscape(e) ||
      this.regexp_eatCControlLetter(e) ||
      this.regexp_eatZero(e) ||
      this.regexp_eatHexEscapeSequence(e) ||
      this.regexp_eatRegExpUnicodeEscapeSequence(e, !1) ||
      (!e.switchU && this.regexp_eatLegacyOctalEscapeSequence(e)) ||
      this.regexp_eatIdentityEscape(e)
    );
  }),
  (pp$8.regexp_eatCControlLetter = function (e) {
    var t = e.pos;
    if (e.eat(99)) {
      if (this.regexp_eatControlLetter(e)) return !0;
      e.pos = t;
    }
    return !1;
  }),
  (pp$8.regexp_eatZero = function (e) {
    return (
      !(48 !== e.current() || isDecimalDigit(e.lookahead())) &&
      ((e.lastIntValue = 0), e.advance(), !0)
    );
  }),
  (pp$8.regexp_eatControlEscape = function (e) {
    var t = e.current();
    return 116 === t
      ? ((e.lastIntValue = 9), e.advance(), !0)
      : 110 === t
      ? ((e.lastIntValue = 10), e.advance(), !0)
      : 118 === t
      ? ((e.lastIntValue = 11), e.advance(), !0)
      : 102 === t
      ? ((e.lastIntValue = 12), e.advance(), !0)
      : !(114 !== t) && ((e.lastIntValue = 13), e.advance(), !0);
  }),
  (pp$8.regexp_eatControlLetter = function (e) {
    var t = e.current();
    return !!isControlLetter(t) && ((e.lastIntValue = t % 32), e.advance(), !0);
  });
function isControlLetter(e) {
  return (65 <= e && 90 >= e) || (97 <= e && 122 >= e);
}
pp$8.regexp_eatRegExpUnicodeEscapeSequence = function (e, t) {
  void 0 === t && (t = !1);
  var a = e.pos,
    n = t || e.switchU;
  if (e.eat(117)) {
    if (this.regexp_eatFixedHexDigits(e, 4)) {
      var r = e.lastIntValue;
      if (n && 55296 <= r && 56319 >= r) {
        var s = e.pos;
        if (e.eat(92) && e.eat(117) && this.regexp_eatFixedHexDigits(e, 4)) {
          var i = e.lastIntValue;
          if (56320 <= i && 57343 >= i)
            return (
              (e.lastIntValue = 1024 * (r - 55296) + (i - 56320) + 65536), !0
            );
        }
        (e.pos = s), (e.lastIntValue = r);
      }
      return !0;
    }
    if (
      n &&
      e.eat(123) &&
      this.regexp_eatHexDigits(e) &&
      e.eat(125) &&
      isValidUnicode(e.lastIntValue)
    )
      return !0;
    n && e.raise('Invalid unicode escape'), (e.pos = a);
  }
  return !1;
};
function isValidUnicode(e) {
  return 0 <= e && 1114111 >= e;
}
(pp$8.regexp_eatIdentityEscape = function (e) {
  if (e.switchU)
    return (
      !!this.regexp_eatSyntaxCharacter(e) ||
      (!!e.eat(47) && ((e.lastIntValue = 47), !0))
    );
  var t = e.current();
  return (
    !(99 === t || (e.switchN && 107 === t)) &&
    ((e.lastIntValue = t), e.advance(), !0)
  );
}),
  (pp$8.regexp_eatDecimalEscape = function (e) {
    e.lastIntValue = 0;
    var t = e.current();
    if (49 <= t && 57 >= t) {
      do (e.lastIntValue = 10 * e.lastIntValue + (t - 48)), e.advance();
      while (48 <= (t = e.current()) && 57 >= t);
      return !0;
    }
    return !1;
  }),
  (pp$8.regexp_eatCharacterClassEscape = function (e) {
    var t = e.current();
    if (isCharacterClassEscape(t))
      return (e.lastIntValue = -1), e.advance(), !0;
    if (e.switchU && 9 <= this.options.ecmaVersion && (80 === t || 112 === t)) {
      if (
        ((e.lastIntValue = -1),
        e.advance(),
        e.eat(123) &&
          this.regexp_eatUnicodePropertyValueExpression(e) &&
          e.eat(125))
      )
        return !0;
      e.raise('Invalid property name');
    }
    return !1;
  });
function isCharacterClassEscape(e) {
  return (
    100 === e || 68 === e || 115 === e || 83 === e || 119 === e || 87 === e
  );
}
(pp$8.regexp_eatUnicodePropertyValueExpression = function (e) {
  var t = e.pos;
  if (this.regexp_eatUnicodePropertyName(e) && e.eat(61)) {
    var a = e.lastStringValue;
    if (this.regexp_eatUnicodePropertyValue(e)) {
      var n = e.lastStringValue;
      return this.regexp_validateUnicodePropertyNameAndValue(e, a, n), !0;
    }
  }
  if (((e.pos = t), this.regexp_eatLoneUnicodePropertyNameOrValue(e))) {
    var r = e.lastStringValue;
    return this.regexp_validateUnicodePropertyNameOrValue(e, r), !0;
  }
  return !1;
}),
  (pp$8.regexp_validateUnicodePropertyNameAndValue = function (e, t, a) {
    has(e.unicodeProperties.nonBinary, t) || e.raise('Invalid property name'),
      e.unicodeProperties.nonBinary[t].test(a) ||
        e.raise('Invalid property value');
  }),
  (pp$8.regexp_validateUnicodePropertyNameOrValue = function (e, t) {
    e.unicodeProperties.binary.test(t) || e.raise('Invalid property name');
  }),
  (pp$8.regexp_eatUnicodePropertyName = function (e) {
    var t = 0;
    for (
      e.lastStringValue = '';
      isUnicodePropertyNameCharacter((t = e.current()));

    )
      (e.lastStringValue += codePointToString(t)), e.advance();
    return '' !== e.lastStringValue;
  });
function isUnicodePropertyNameCharacter(e) {
  return isControlLetter(e) || 95 === e;
}
pp$8.regexp_eatUnicodePropertyValue = function (e) {
  var t = 0;
  for (
    e.lastStringValue = '';
    isUnicodePropertyValueCharacter((t = e.current()));

  )
    (e.lastStringValue += codePointToString(t)), e.advance();
  return '' !== e.lastStringValue;
};
function isUnicodePropertyValueCharacter(e) {
  return isUnicodePropertyNameCharacter(e) || isDecimalDigit(e);
}
(pp$8.regexp_eatLoneUnicodePropertyNameOrValue = function (e) {
  return this.regexp_eatUnicodePropertyValue(e);
}),
  (pp$8.regexp_eatCharacterClass = function (e) {
    if (e.eat(91)) {
      if ((e.eat(94), this.regexp_classRanges(e), e.eat(93))) return !0;
      e.raise('Unterminated character class');
    }
    return !1;
  }),
  (pp$8.regexp_classRanges = function (e) {
    for (; this.regexp_eatClassAtom(e); ) {
      var t = e.lastIntValue;
      if (e.eat(45) && this.regexp_eatClassAtom(e)) {
        var a = e.lastIntValue;
        e.switchU &&
          (-1 === t || -1 === a) &&
          e.raise('Invalid character class'),
          -1 !== t &&
            -1 !== a &&
            t > a &&
            e.raise('Range out of order in character class');
      }
    }
  }),
  (pp$8.regexp_eatClassAtom = function (e) {
    var t = e.pos;
    if (e.eat(92)) {
      if (this.regexp_eatClassEscape(e)) return !0;
      if (e.switchU) {
        var a = e.current();
        (99 === a || isOctalDigit(a)) && e.raise('Invalid class escape'),
          e.raise('Invalid escape');
      }
      e.pos = t;
    }
    var n = e.current();
    return 93 !== n && ((e.lastIntValue = n), e.advance(), !0);
  }),
  (pp$8.regexp_eatClassEscape = function (e) {
    var t = e.pos;
    if (e.eat(98)) return (e.lastIntValue = 8), !0;
    if (e.switchU && e.eat(45)) return (e.lastIntValue = 45), !0;
    if (!e.switchU && e.eat(99)) {
      if (this.regexp_eatClassControlLetter(e)) return !0;
      e.pos = t;
    }
    return (
      this.regexp_eatCharacterClassEscape(e) ||
      this.regexp_eatCharacterEscape(e)
    );
  }),
  (pp$8.regexp_eatClassControlLetter = function (e) {
    var t = e.current();
    return (
      !!(isDecimalDigit(t) || 95 === t) &&
      ((e.lastIntValue = t % 32), e.advance(), !0)
    );
  }),
  (pp$8.regexp_eatHexEscapeSequence = function (e) {
    var t = e.pos;
    if (e.eat(120)) {
      if (this.regexp_eatFixedHexDigits(e, 2)) return !0;
      e.switchU && e.raise('Invalid escape'), (e.pos = t);
    }
    return !1;
  }),
  (pp$8.regexp_eatDecimalDigits = function (e) {
    var t = e.pos,
      a = 0;
    for (e.lastIntValue = 0; isDecimalDigit((a = e.current())); )
      (e.lastIntValue = 10 * e.lastIntValue + (a - 48)), e.advance();
    return e.pos !== t;
  });
function isDecimalDigit(e) {
  return 48 <= e && 57 >= e;
}
pp$8.regexp_eatHexDigits = function (e) {
  var t = e.pos,
    a = 0;
  for (e.lastIntValue = 0; isHexDigit((a = e.current())); )
    (e.lastIntValue = 16 * e.lastIntValue + hexToInt(a)), e.advance();
  return e.pos !== t;
};
function isHexDigit(e) {
  return (48 <= e && 57 >= e) || (65 <= e && 70 >= e) || (97 <= e && 102 >= e);
}
function hexToInt(e) {
  return 65 <= e && 70 >= e
    ? 10 + (e - 65)
    : 97 <= e && 102 >= e
    ? 10 + (e - 97)
    : e - 48;
}
(pp$8.regexp_eatLegacyOctalEscapeSequence = function (e) {
  if (this.regexp_eatOctalDigit(e)) {
    var t = e.lastIntValue;
    if (this.regexp_eatOctalDigit(e)) {
      var a = e.lastIntValue;
      e.lastIntValue =
        3 >= t && this.regexp_eatOctalDigit(e)
          ? 64 * t + 8 * a + e.lastIntValue
          : 8 * t + a;
    } else e.lastIntValue = t;
    return !0;
  }
  return !1;
}),
  (pp$8.regexp_eatOctalDigit = function (e) {
    var t = e.current();
    return isOctalDigit(t)
      ? ((e.lastIntValue = t - 48), e.advance(), !0)
      : ((e.lastIntValue = 0), !1);
  });
function isOctalDigit(e) {
  return 48 <= e && 55 >= e;
}
pp$8.regexp_eatFixedHexDigits = function (e, t) {
  var a = e.pos;
  e.lastIntValue = 0;
  for (var n, r = 0; r < t; ++r) {
    if (((n = e.current()), !isHexDigit(n))) return (e.pos = a), !1;
    (e.lastIntValue = 16 * e.lastIntValue + hexToInt(n)), e.advance();
  }
  return !0;
};
var Token = function (e) {
    (this.type = e.type),
      (this.value = e.value),
      (this.start = e.start),
      (this.end = e.end),
      e.options.locations &&
        (this.loc = new SourceLocation(e, e.startLoc, e.endLoc)),
      e.options.ranges && (this.range = [e.start, e.end]);
  },
  pp$9 = Parser.prototype;
(pp$9.next = function (e) {
  !e &&
    this.type.keyword &&
    this.containsEsc &&
    this.raiseRecoverable(
      this.start,
      'Escape sequence in keyword ' + this.type.keyword,
    ),
    this.options.onToken && this.options.onToken(new Token(this)),
    (this.lastTokEnd = this.end),
    (this.lastTokStart = this.start),
    (this.lastTokEndLoc = this.endLoc),
    (this.lastTokStartLoc = this.startLoc),
    this.nextToken();
}),
  (pp$9.getToken = function () {
    return this.next(), new Token(this);
  }),
  'undefined' != typeof Symbol &&
    (pp$9[Symbol.iterator] = function () {
      var e = this;
      return {
        next: function () {
          var t = e.getToken();
          return { done: t.type === types.eof, value: t };
        },
      };
    }),
  (pp$9.curContext = function () {
    return this.context[this.context.length - 1];
  }),
  (pp$9.nextToken = function () {
    var e = this.curContext();
    return (
      (e && e.preserveSpace) || this.skipSpace(),
      (this.start = this.pos),
      this.options.locations && (this.startLoc = this.curPosition()),
      this.pos >= this.input.length
        ? this.finishToken(types.eof)
        : e.override
        ? e.override(this)
        : void this.readToken(this.fullCharCodeAtPos())
    );
  }),
  (pp$9.readToken = function (e) {
    return isIdentifierStart(e, 6 <= this.options.ecmaVersion) || 92 === e
      ? this.readWord()
      : this.getTokenFromCode(e);
  }),
  (pp$9.fullCharCodeAtPos = function () {
    var e = this.input.charCodeAt(this.pos);
    if (55295 >= e || 56320 <= e) return e;
    var t = this.input.charCodeAt(this.pos + 1);
    return 56319 >= t || 57344 <= t ? e : (e << 10) + t - 56613888;
  }),
  (pp$9.skipBlockComment = function () {
    var e = this.options.onComment && this.curPosition(),
      t = this.pos,
      a = this.input.indexOf('*/', (this.pos += 2));
    if (
      (-1 === a && this.raise(this.pos - 2, 'Unterminated comment'),
      (this.pos = a + 2),
      this.options.locations)
    ) {
      lineBreakG.lastIndex = t;
      for (var n; (n = lineBreakG.exec(this.input)) && n.index < this.pos; )
        ++this.curLine, (this.lineStart = n.index + n[0].length);
    }
    this.options.onComment &&
      this.options.onComment(
        !0,
        this.input.slice(t + 2, a),
        t,
        this.pos,
        e,
        this.curPosition(),
      );
  }),
  (pp$9.skipLineComment = function (e) {
    for (
      var t = this.pos,
        a = this.options.onComment && this.curPosition(),
        n = this.input.charCodeAt((this.pos += e));
      this.pos < this.input.length && !isNewLine(n);

    )
      n = this.input.charCodeAt(++this.pos);
    this.options.onComment &&
      this.options.onComment(
        !1,
        this.input.slice(t + e, this.pos),
        t,
        this.pos,
        a,
        this.curPosition(),
      );
  }),
  (pp$9.skipSpace = function () {
    loop: for (; this.pos < this.input.length; ) {
      var e = this.input.charCodeAt(this.pos);
      switch (e) {
        case 32:
        case 160:
          ++this.pos;
          break;
        case 13:
          10 === this.input.charCodeAt(this.pos + 1) && ++this.pos;
        case 10:
        case 8232:
        case 8233:
          ++this.pos,
            this.options.locations &&
              (++this.curLine, (this.lineStart = this.pos));
          break;
        case 47:
          switch (this.input.charCodeAt(this.pos + 1)) {
            case 42:
              this.skipBlockComment();
              break;
            case 47:
              this.skipLineComment(2);
              break;
            default:
              break loop;
          }
          break;
        default:
          if (
            (8 < e && 14 > e) ||
            (5760 <= e && nonASCIIwhitespace.test(String.fromCharCode(e)))
          )
            ++this.pos;
          else break loop;
      }
    }
  }),
  (pp$9.finishToken = function (e, t) {
    (this.end = this.pos),
      this.options.locations && (this.endLoc = this.curPosition());
    var a = this.type;
    (this.type = e), (this.value = t), this.updateContext(a);
  }),
  (pp$9.readToken_dot = function () {
    var e = this.input.charCodeAt(this.pos + 1);
    if (48 <= e && 57 >= e) return this.readNumber(!0);
    var t = this.input.charCodeAt(this.pos + 2);
    return 6 <= this.options.ecmaVersion && 46 === e && 46 === t
      ? ((this.pos += 3), this.finishToken(types.ellipsis))
      : (++this.pos, this.finishToken(types.dot));
  }),
  (pp$9.readToken_slash = function () {
    var e = this.input.charCodeAt(this.pos + 1);
    return this.exprAllowed
      ? (++this.pos, this.readRegexp())
      : 61 === e
      ? this.finishOp(types.assign, 2)
      : this.finishOp(types.slash, 1);
  }),
  (pp$9.readToken_mult_modulo_exp = function (e) {
    var t = this.input.charCodeAt(this.pos + 1),
      a = 1,
      n = 42 === e ? types.star : types.modulo;
    return (
      7 <= this.options.ecmaVersion &&
        42 === e &&
        42 === t &&
        (++a, (n = types.starstar), (t = this.input.charCodeAt(this.pos + 2))),
      61 === t ? this.finishOp(types.assign, a + 1) : this.finishOp(n, a)
    );
  }),
  (pp$9.readToken_pipe_amp = function (e) {
    var t = this.input.charCodeAt(this.pos + 1);
    if (t === e) {
      if (12 <= this.options.ecmaVersion) {
        var a = this.input.charCodeAt(this.pos + 2);
        if (61 === a) return this.finishOp(types.assign, 3);
      }
      return this.finishOp(124 === e ? types.logicalOR : types.logicalAND, 2);
    }
    return 61 === t
      ? this.finishOp(types.assign, 2)
      : this.finishOp(124 === e ? types.bitwiseOR : types.bitwiseAND, 1);
  }),
  (pp$9.readToken_caret = function () {
    var e = this.input.charCodeAt(this.pos + 1);
    return 61 === e
      ? this.finishOp(types.assign, 2)
      : this.finishOp(types.bitwiseXOR, 1);
  }),
  (pp$9.readToken_plus_min = function (e) {
    var t = this.input.charCodeAt(this.pos + 1);
    return t === e
      ? 45 === t &&
        !this.inModule &&
        62 === this.input.charCodeAt(this.pos + 2) &&
        (0 === this.lastTokEnd ||
          lineBreak.test(this.input.slice(this.lastTokEnd, this.pos)))
        ? (this.skipLineComment(3), this.skipSpace(), this.nextToken())
        : this.finishOp(types.incDec, 2)
      : 61 === t
      ? this.finishOp(types.assign, 2)
      : this.finishOp(types.plusMin, 1);
  }),
  (pp$9.readToken_lt_gt = function (e) {
    var t = this.input.charCodeAt(this.pos + 1),
      a = 1;
    return t === e
      ? ((a = 62 === e && 62 === this.input.charCodeAt(this.pos + 2) ? 3 : 2),
        61 === this.input.charCodeAt(this.pos + a)
          ? this.finishOp(types.assign, a + 1)
          : this.finishOp(types.bitShift, a))
      : 33 !== t ||
        60 !== e ||
        this.inModule ||
        45 !== this.input.charCodeAt(this.pos + 2) ||
        45 !== this.input.charCodeAt(this.pos + 3)
      ? (61 === t && (a = 2), this.finishOp(types.relational, a))
      : (this.skipLineComment(4), this.skipSpace(), this.nextToken());
  }),
  (pp$9.readToken_eq_excl = function (e) {
    var t = this.input.charCodeAt(this.pos + 1);
    return 61 === t
      ? this.finishOp(
          types.equality,
          61 === this.input.charCodeAt(this.pos + 2) ? 3 : 2,
        )
      : 61 === e && 62 === t && 6 <= this.options.ecmaVersion
      ? ((this.pos += 2), this.finishToken(types.arrow))
      : this.finishOp(61 === e ? types.eq : types.prefix, 1);
  }),
  (pp$9.readToken_question = function () {
    var e = this.options.ecmaVersion;
    if (11 <= e) {
      var t = this.input.charCodeAt(this.pos + 1);
      if (46 === t) {
        var a = this.input.charCodeAt(this.pos + 2);
        if (48 > a || 57 < a) return this.finishOp(types.questionDot, 2);
      }
      if (63 === t) {
        if (12 <= e) {
          var n = this.input.charCodeAt(this.pos + 2);
          if (61 === n) return this.finishOp(types.assign, 3);
        }
        return this.finishOp(types.coalesce, 2);
      }
    }
    return this.finishOp(types.question, 1);
  }),
  (pp$9.readToken_numberSign = function () {
    var e = this.options.ecmaVersion,
      t = 35;
    return 13 <= e &&
      (++this.pos,
      (t = this.fullCharCodeAtPos()),
      isIdentifierStart(t, !0) || 92 === t)
      ? this.finishToken(types.privateId, this.readWord1())
      : void this.raise(
          this.pos,
          "Unexpected character '" + codePointToString$1(t) + "'",
        );
  }),
  (pp$9.getTokenFromCode = function (e) {
    switch (e) {
      case 46:
        return this.readToken_dot();
      case 40:
        return ++this.pos, this.finishToken(types.parenL);
      case 41:
        return ++this.pos, this.finishToken(types.parenR);
      case 59:
        return ++this.pos, this.finishToken(types.semi);
      case 44:
        return ++this.pos, this.finishToken(types.comma);
      case 91:
        return ++this.pos, this.finishToken(types.bracketL);
      case 93:
        return ++this.pos, this.finishToken(types.bracketR);
      case 123:
        return ++this.pos, this.finishToken(types.braceL);
      case 125:
        return ++this.pos, this.finishToken(types.braceR);
      case 58:
        return ++this.pos, this.finishToken(types.colon);
      case 96:
        if (6 > this.options.ecmaVersion) break;
        return ++this.pos, this.finishToken(types.backQuote);
      case 48:
        var t = this.input.charCodeAt(this.pos + 1);
        if (120 === t || 88 === t) return this.readRadixNumber(16);
        if (6 <= this.options.ecmaVersion) {
          if (111 === t || 79 === t) return this.readRadixNumber(8);
          if (98 === t || 66 === t) return this.readRadixNumber(2);
        }
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
        return this.readNumber(!1);
      case 34:
      case 39:
        return this.readString(e);
      case 47:
        return this.readToken_slash();
      case 37:
      case 42:
        return this.readToken_mult_modulo_exp(e);
      case 124:
      case 38:
        return this.readToken_pipe_amp(e);
      case 94:
        return this.readToken_caret();
      case 43:
      case 45:
        return this.readToken_plus_min(e);
      case 60:
      case 62:
        return this.readToken_lt_gt(e);
      case 61:
      case 33:
        return this.readToken_eq_excl(e);
      case 63:
        return this.readToken_question();
      case 126:
        return this.finishOp(types.prefix, 1);
      case 35:
        return this.readToken_numberSign();
    }
    this.raise(
      this.pos,
      "Unexpected character '" + codePointToString$1(e) + "'",
    );
  }),
  (pp$9.finishOp = function (e, t) {
    var a = this.input.slice(this.pos, this.pos + t);
    return (this.pos += t), this.finishToken(e, a);
  }),
  (pp$9.readRegexp = function () {
    for (var e, t, a = this.pos; ; ) {
      this.pos >= this.input.length &&
        this.raise(a, 'Unterminated regular expression');
      var n = this.input.charAt(this.pos);
      if (
        (lineBreak.test(n) && this.raise(a, 'Unterminated regular expression'),
        !e)
      ) {
        if ('[' === n) t = !0;
        else if (']' === n && t) t = !1;
        else if ('/' === n && !t) break;
        e = '\\' === n;
      } else e = !1;
      ++this.pos;
    }
    var r = this.input.slice(a, this.pos);
    ++this.pos;
    var s = this.pos,
      i = this.readWord1();
    this.containsEsc && this.unexpected(s);
    var o =
      this.regexpState || (this.regexpState = new RegExpValidationState(this));
    o.reset(a, r, i),
      this.validateRegExpFlags(o),
      this.validateRegExpPattern(o);
    var p = null;
    try {
      p = new RegExp(r, i);
    } catch (t) {}
    return this.finishToken(types.regexp, { pattern: r, flags: i, value: p });
  }),
  (pp$9.readInt = function (t, a, n) {
    for (
      var r = 12 <= this.options.ecmaVersion && void 0 === a,
        s = n && 48 === this.input.charCodeAt(this.pos),
        o = this.pos,
        p = 0,
        c = 0,
        l = 0,
        d = null == a ? 1 / 0 : a;
      l < d;
      ++l, ++this.pos
    ) {
      var e = this.input.charCodeAt(this.pos),
        u = void 0;
      if (r && 95 === e) {
        s &&
          this.raiseRecoverable(
            this.pos,
            'Numeric separator is not allowed in legacy octal numeric literals',
          ),
          95 === c &&
            this.raiseRecoverable(
              this.pos,
              'Numeric separator must be exactly one underscore',
            ),
          0 === l &&
            this.raiseRecoverable(
              this.pos,
              'Numeric separator is not allowed at the first of digits',
            ),
          (c = e);
        continue;
      }
      if (
        ((u =
          97 <= e
            ? e - 97 + 10
            : 65 <= e
            ? e - 65 + 10
            : 48 <= e && 57 >= e
            ? e - 48
            : 1 / 0),
        u >= t)
      )
        break;
      (c = e), (p = p * t + u);
    }
    return (
      r &&
        95 === c &&
        this.raiseRecoverable(
          this.pos - 1,
          'Numeric separator is not allowed at the last of digits',
        ),
      this.pos === o || (null != a && this.pos - o !== a) ? null : p
    );
  });
function stringToNumber(e, t) {
  return t ? parseInt(e, 8) : parseFloat(e.replace(/_/g, ''));
}
function stringToBigInt(e) {
  return 'function' == typeof BigInt ? BigInt(e.replace(/_/g, '')) : null;
}
(pp$9.readRadixNumber = function (e) {
  var t = this.pos;
  this.pos += 2;
  var a = this.readInt(e);
  return (
    null == a && this.raise(this.start + 2, 'Expected number in radix ' + e),
    11 <= this.options.ecmaVersion && 110 === this.input.charCodeAt(this.pos)
      ? ((a = stringToBigInt(this.input.slice(t, this.pos))), ++this.pos)
      : isIdentifierStart(this.fullCharCodeAtPos()) &&
        this.raise(this.pos, 'Identifier directly after number'),
    this.finishToken(types.num, a)
  );
}),
  (pp$9.readNumber = function (e) {
    var t = this.pos;
    e ||
      null !== this.readInt(10, void 0, !0) ||
      this.raise(t, 'Invalid number');
    var a = 2 <= this.pos - t && 48 === this.input.charCodeAt(t);
    a && this.strict && this.raise(t, 'Invalid number');
    var n = this.input.charCodeAt(this.pos);
    if (!a && !e && 11 <= this.options.ecmaVersion && 110 === n) {
      var r = stringToBigInt(this.input.slice(t, this.pos));
      return (
        ++this.pos,
        isIdentifierStart(this.fullCharCodeAtPos()) &&
          this.raise(this.pos, 'Identifier directly after number'),
        this.finishToken(types.num, r)
      );
    }
    a && /[89]/.test(this.input.slice(t, this.pos)) && (a = !1),
      46 !== n ||
        a ||
        (++this.pos, this.readInt(10), (n = this.input.charCodeAt(this.pos))),
      (69 !== n && 101 !== n) ||
        a ||
        ((n = this.input.charCodeAt(++this.pos)),
        (43 === n || 45 === n) && ++this.pos,
        null === this.readInt(10) && this.raise(t, 'Invalid number')),
      isIdentifierStart(this.fullCharCodeAtPos()) &&
        this.raise(this.pos, 'Identifier directly after number');
    var s = stringToNumber(this.input.slice(t, this.pos), a);
    return this.finishToken(types.num, s);
  }),
  (pp$9.readCodePoint = function () {
    var e,
      t = this.input.charCodeAt(this.pos);
    if (123 === t) {
      6 > this.options.ecmaVersion && this.unexpected();
      var a = ++this.pos;
      (e = this.readHexChar(this.input.indexOf('}', this.pos) - this.pos)),
        ++this.pos,
        1114111 < e && this.invalidStringToken(a, 'Code point out of bounds');
    } else e = this.readHexChar(4);
    return e;
  });
function codePointToString$1(e) {
  return 65535 >= e
    ? String.fromCharCode(e)
    : ((e -= 65536),
      String.fromCharCode((e >> 10) + 55296, (1023 & e) + 56320));
}
pp$9.readString = function (e) {
  for (var t = '', a = ++this.pos; ; ) {
    this.pos >= this.input.length &&
      this.raise(this.start, 'Unterminated string constant');
    var n = this.input.charCodeAt(this.pos);
    if (n === e) break;
    92 === n
      ? ((t += this.input.slice(a, this.pos)),
        (t += this.readEscapedChar(!1)),
        (a = this.pos))
      : (isNewLine(n, 10 <= this.options.ecmaVersion) &&
          this.raise(this.start, 'Unterminated string constant'),
        ++this.pos);
  }
  return (
    (t += this.input.slice(a, this.pos++)), this.finishToken(types.string, t)
  );
};
var INVALID_TEMPLATE_ESCAPE_ERROR = {};
(pp$9.tryReadTemplateToken = function () {
  this.inTemplateElement = !0;
  try {
    this.readTmplToken();
  } catch (e) {
    if (e === INVALID_TEMPLATE_ESCAPE_ERROR) this.readInvalidTemplateToken();
    else throw e;
  }
  this.inTemplateElement = !1;
}),
  (pp$9.invalidStringToken = function (e, t) {
    if (this.inTemplateElement && 9 <= this.options.ecmaVersion)
      throw INVALID_TEMPLATE_ESCAPE_ERROR;
    else this.raise(e, t);
  }),
  (pp$9.readTmplToken = function () {
    for (var e = '', t = this.pos; ; ) {
      this.pos >= this.input.length &&
        this.raise(this.start, 'Unterminated template');
      var a = this.input.charCodeAt(this.pos);
      if (96 === a || (36 === a && 123 === this.input.charCodeAt(this.pos + 1)))
        return this.pos === this.start &&
          (this.type === types.template || this.type === types.invalidTemplate)
          ? 36 === a
            ? ((this.pos += 2), this.finishToken(types.dollarBraceL))
            : (++this.pos, this.finishToken(types.backQuote))
          : ((e += this.input.slice(t, this.pos)),
            this.finishToken(types.template, e));
      if (92 === a)
        (e += this.input.slice(t, this.pos)),
          (e += this.readEscapedChar(!0)),
          (t = this.pos);
      else if (isNewLine(a)) {
        switch (((e += this.input.slice(t, this.pos)), ++this.pos, a)) {
          case 13:
            10 === this.input.charCodeAt(this.pos) && ++this.pos;
          case 10:
            e += '\n';
            break;
          default:
            e += String.fromCharCode(a);
        }
        this.options.locations && (++this.curLine, (this.lineStart = this.pos)),
          (t = this.pos);
      } else ++this.pos;
    }
  }),
  (pp$9.readInvalidTemplateToken = function () {
    for (; this.pos < this.input.length; this.pos++)
      switch (this.input[this.pos]) {
        case '\\':
          ++this.pos;
          break;
        case '$':
          if ('{' !== this.input[this.pos + 1]) break;
        case '`':
          return this.finishToken(
            types.invalidTemplate,
            this.input.slice(this.start, this.pos),
          );
      }
    this.raise(this.start, 'Unterminated template');
  }),
  (pp$9.readEscapedChar = function (e) {
    var t = this.input.charCodeAt(++this.pos);
    switch ((++this.pos, t)) {
      case 110:
        return '\n';
      case 114:
        return '\r';
      case 120:
        return String.fromCharCode(this.readHexChar(2));
      case 117:
        return codePointToString$1(this.readCodePoint());
      case 116:
        return '\t';
      case 98:
        return '\b';
      case 118:
        return '\x0B';
      case 102:
        return '\f';
      case 13:
        10 === this.input.charCodeAt(this.pos) && ++this.pos;
      case 10:
        return (
          this.options.locations &&
            ((this.lineStart = this.pos), ++this.curLine),
          ''
        );
      case 56:
      case 57:
        if (
          (this.strict &&
            this.invalidStringToken(this.pos - 1, 'Invalid escape sequence'),
          e)
        ) {
          var a = this.pos - 1;
          return (
            this.invalidStringToken(
              a,
              'Invalid escape sequence in template string',
            ),
            null
          );
        }
      default:
        if (48 <= t && 55 >= t) {
          var n = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0],
            r = parseInt(n, 8);
          return (
            255 < r && ((n = n.slice(0, -1)), (r = parseInt(n, 8))),
            (this.pos += n.length - 1),
            (t = this.input.charCodeAt(this.pos)),
            ('0' !== n || 56 === t || 57 === t) &&
              (this.strict || e) &&
              this.invalidStringToken(
                this.pos - 1 - n.length,
                e
                  ? 'Octal literal in template string'
                  : 'Octal literal in strict mode',
              ),
            String.fromCharCode(r)
          );
        }
        return isNewLine(t) ? '' : String.fromCharCode(t);
    }
  }),
  (pp$9.readHexChar = function (e) {
    var t = this.pos,
      a = this.readInt(16, e);
    return (
      null === a && this.invalidStringToken(t, 'Bad character escape sequence'),
      a
    );
  }),
  (pp$9.readWord1 = function () {
    this.containsEsc = !1;
    for (
      var e = '', t = !0, a = this.pos, n = 6 <= this.options.ecmaVersion;
      this.pos < this.input.length;

    ) {
      var r = this.fullCharCodeAtPos();
      if (isIdentifierChar(r, n)) this.pos += 65535 >= r ? 1 : 2;
      else if (92 === r) {
        (this.containsEsc = !0), (e += this.input.slice(a, this.pos));
        var s = this.pos;
        117 !== this.input.charCodeAt(++this.pos) &&
          this.invalidStringToken(
            this.pos,
            'Expecting Unicode escape sequence \\uXXXX',
          ),
          ++this.pos;
        var i = this.readCodePoint();
        (t ? isIdentifierStart : isIdentifierChar)(i, n) ||
          this.invalidStringToken(s, 'Invalid Unicode escape'),
          (e += codePointToString$1(i)),
          (a = this.pos);
      } else break;
      t = !1;
    }
    return e + this.input.slice(a, this.pos);
  }),
  (pp$9.readWord = function () {
    var e = this.readWord1(),
      t = types.name;
    return this.keywords.test(e) && (t = keywords$1[e]), this.finishToken(t, e);
  });
var version = '8.4.1';
Parser.acorn = {
  Parser: Parser,
  version: '8.4.1',
  defaultOptions: defaultOptions,
  Position: Position,
  SourceLocation: SourceLocation,
  getLineInfo: getLineInfo,
  Node: Node,
  TokenType: TokenType,
  tokTypes: types,
  keywordTypes: keywords$1,
  TokContext: TokContext,
  tokContexts: types$1,
  isIdentifierChar: isIdentifierChar,
  isIdentifierStart: isIdentifierStart,
  Token: Token,
  isNewLine: isNewLine,
  lineBreak: lineBreak,
  lineBreakG: lineBreakG,
  nonASCIIwhitespace: nonASCIIwhitespace,
};
function parse(e, t) {
  return Parser.parse(e, t);
}
function parseExpressionAt(e, t, a) {
  return Parser.parseExpressionAt(e, t, a);
}
function tokenizer(e, t) {
  return Parser.tokenizer(e, t);
}
export {
  Node,
  Parser,
  Position,
  SourceLocation,
  TokContext,
  Token,
  TokenType,
  defaultOptions,
  getLineInfo,
  isIdentifierChar,
  isIdentifierStart,
  isNewLine,
  keywords$1 as keywordTypes,
  lineBreak,
  lineBreakG,
  nonASCIIwhitespace,
  parse,
  parseExpressionAt,
  types$1 as tokContexts,
  types as tokTypes,
  tokenizer,
  version,
};
